/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : DISPLAY_SYNC_PWM0.h
**     Project     : ProcessorExpert
**     Processor   : MK60DN512VMC10
**     Component   : PWM_LDD
**     Version     : Component 01.002, Driver 01.01, CPU db: 3.00.000
**     Compiler    : CodeWarrior ARM C Compiler
**     Date/Time   : 2013-04-19, 18:31, # CodeGen: 94
**     Abstract    :
**          This component implements a pulse-width modulation generator
**          that generates signal with variable duty and fixed cycle.
**          This PWM component provides a high level API for unified
**          hardware access to various timer devices using the TimerUnit
**          component.
**     Settings    :
**          Component name                                 : DISPLAY_SYNC_PWM0
**          Period device                                  : FTM0_MOD
**          Duty device                                    : FTM0_C0V
**          Output pin                                     : ADC0_SE15/TSI0_CH14/PTC1/LLWU_P6/SPI0_PCS3/UART1_RTS_b/FTM0_CH0/FB_AD13/I2S0_TXD0
**          Output pin signal                              : DISPLAY_SYNC_PWM
**          Counter                                        : FTM0_CNT
**          Interrupt service/event                        : Disabled
**          Period                                         : 5.464481 ms
**          Starting pulse width                           : 2.732199 ms
**          Initial polarity                               : high
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnEnd                                      : Disabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**          Referenced components                          : 
**            Linked component                             : TU1
**     Contents    :
**         Init        - LDD_TDeviceData* DISPLAY_SYNC_PWM0_Init(LDD_TUserData *UserDataPtr);
**         Deinit      - void DISPLAY_SYNC_PWM0_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         Enable      - LDD_TError DISPLAY_SYNC_PWM0_Enable(LDD_TDeviceData *DeviceDataPtr);
**         Disable     - LDD_TError DISPLAY_SYNC_PWM0_Disable(LDD_TDeviceData *DeviceDataPtr);
**         SetRatio16  - LDD_TError DISPLAY_SYNC_PWM0_SetRatio16(LDD_TDeviceData *DeviceDataPtr,...
**         SetDutyUS   - LDD_TError DISPLAY_SYNC_PWM0_SetDutyUS(LDD_TDeviceData *DeviceDataPtr,...
**         SetDutyMS   - LDD_TError DISPLAY_SYNC_PWM0_SetDutyMS(LDD_TDeviceData *DeviceDataPtr,...
**         SetDutySec  - LDD_TError DISPLAY_SYNC_PWM0_SetDutySec(LDD_TDeviceData *DeviceDataPtr,...
**         SetDutyReal - LDD_TError DISPLAY_SYNC_PWM0_SetDutyReal(LDD_TDeviceData *DeviceDataPtr,...
**
**     Copyright : 1997 - 2012 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file DISPLAY_SYNC_PWM0.h
** @version 01.01
** @date 2013-04-19, 18:31, # CodeGen: 94
** @brief
**          This component implements a pulse-width modulation generator
**          that generates signal with variable duty and fixed cycle.
**          This PWM component provides a high level API for unified
**          hardware access to various timer devices using the TimerUnit
**          component.
*/         
/*!
**  @addtogroup DISPLAY_SYNC_PWM0_module DISPLAY_SYNC_PWM0 module documentation
**  @{
*/         

#ifndef __DISPLAY_SYNC_PWM0_H
#define __DISPLAY_SYNC_PWM0_H

/* MODULE DISPLAY_SYNC_PWM0. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "TU1.h"
#include "FTM_PDD.h"

#include "Cpu.h"


#define DISPLAY_SYNC_PWM0_PERIOD_VALUE 0x00UL /* Initial period value in ticks of the timer. */
#define DISPLAY_SYNC_PWM0_PERIOD_VALUE_0 0x00UL /* Period value in ticks of the timer in clock configuration 0. */

/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define DISPLAY_SYNC_PWM0_PRPH_BASE_ADDRESS  0x40038000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define DISPLAY_SYNC_PWM0_Init_METHOD_ENABLED /*!< Init method of the component DISPLAY_SYNC_PWM0 is enabled (generated) */
#define DISPLAY_SYNC_PWM0_Deinit_METHOD_ENABLED /*!< Deinit method of the component DISPLAY_SYNC_PWM0 is enabled (generated) */
#define DISPLAY_SYNC_PWM0_Enable_METHOD_ENABLED /*!< Enable method of the component DISPLAY_SYNC_PWM0 is enabled (generated) */
#define DISPLAY_SYNC_PWM0_Disable_METHOD_ENABLED /*!< Disable method of the component DISPLAY_SYNC_PWM0 is enabled (generated) */
#define DISPLAY_SYNC_PWM0_SetRatio16_METHOD_ENABLED /*!< SetRatio16 method of the component DISPLAY_SYNC_PWM0 is enabled (generated) */
#define DISPLAY_SYNC_PWM0_SetDutyUS_METHOD_ENABLED /*!< SetDutyUS method of the component DISPLAY_SYNC_PWM0 is enabled (generated) */
#define DISPLAY_SYNC_PWM0_SetDutyMS_METHOD_ENABLED /*!< SetDutyMS method of the component DISPLAY_SYNC_PWM0 is enabled (generated) */
#define DISPLAY_SYNC_PWM0_SetDutySec_METHOD_ENABLED /*!< SetDutySec method of the component DISPLAY_SYNC_PWM0 is enabled (generated) */
#define DISPLAY_SYNC_PWM0_SetDutyReal_METHOD_ENABLED /*!< SetDutyReal method of the component DISPLAY_SYNC_PWM0 is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */



/*
** ===================================================================
**     Method      :  DISPLAY_SYNC_PWM0_Init (component PWM_LDD)
**     Description :
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the
**         property <"Enable in init. code"> is set to "yes" value then
**         the device is also enabled (see the description of the
**         <Enable> method). In this case the <Enable> method is not
**         necessary and needn't to be generated. This method can be
**         called only once. Before the second call of Init the <Deinit>
**         must be called first.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     Returns     :
**         ---             - Pointer to the dynamically allocated
**                           private structure or NULL if there was an
**                           error.
** ===================================================================
*/
LDD_TDeviceData* DISPLAY_SYNC_PWM0_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  DISPLAY_SYNC_PWM0_Deinit (component PWM_LDD)
**     Description :
**         Deinitializes the device. Switches off the device, frees the
**         device data structure memory, interrupts vectors, etc.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by Init method
**     Returns     : Nothing
** ===================================================================
*/
void DISPLAY_SYNC_PWM0_Deinit(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DISPLAY_SYNC_PWM0_Enable (component PWM_LDD)
**     Description :
**         Enables the component - it starts the signal generation.
**         Events may be generated (see SetEventMask).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/
LDD_TError DISPLAY_SYNC_PWM0_Enable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DISPLAY_SYNC_PWM0_Disable (component PWM_LDD)
**     Description :
**         Disables the component - it stops signal generation and
**         events calling.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/
LDD_TError DISPLAY_SYNC_PWM0_Disable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DISPLAY_SYNC_PWM0_SetRatio16 (component PWM_LDD)
**     Description :
**         This method sets a new duty-cycle ratio. Ratio is expressed
**         as a 16-bit unsigned integer number. 0 - FFFF value is
**         proportional to ratio 0 - 100%. The method is available
**         only if it is not selected list of predefined values in
**         <Starting pulse width> property. 
**         Note: Calculated duty depends on the timer possibilities and
**         on the selected period.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Ratio           - Ratio to set. 0 - 65535 value is
**                           proportional to ratio 0 - 100%
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/
LDD_TError DISPLAY_SYNC_PWM0_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Ratio);

/*
** ===================================================================
**     Method      :  DISPLAY_SYNC_PWM0_SetDutyUS (component PWM_LDD)
**     Description :
**         This method sets the new duty value of the output signal.
**         The duty is expressed in microseconds as a 16-bit unsigned
**         integer number. The method is available only if it is not
**         selected list of predefined values in <Starting pulse width>
**         property.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Time            - Duty to set [in microseconds]
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_MATH - Overflow during evaluation
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/
LDD_TError DISPLAY_SYNC_PWM0_SetDutyUS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time);

/*
** ===================================================================
**     Method      :  DISPLAY_SYNC_PWM0_SetDutyMS (component PWM_LDD)
**     Description :
**         This method sets the new duty value of the output signal.
**         The duty is expressed in milliseconds as a 16-bit unsigned
**         integer number. The method is available only if it is not
**         selected list of predefined values in <Starting pulse width>
**         property.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Time            - Duty to set [in milliseconds]
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_MATH - Overflow during evaluation
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/
LDD_TError DISPLAY_SYNC_PWM0_SetDutyMS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time);

/*
** ===================================================================
**     Method      :  DISPLAY_SYNC_PWM0_SetDutySec (component PWM_LDD)
**     Description :
**         This method sets the new duty value of the output signal.
**         The duty is expressed in seconds as a 16-bit unsigned
**         integer number. The method is available only if it is not
**         selected list of predefined values in <Starting pulse width>
**         property.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Time            - Duty to set [in seconds]
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_MATH - Overflow during evaluation
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/
LDD_TError DISPLAY_SYNC_PWM0_SetDutySec(LDD_TDeviceData *DeviceDataPtr, uint16_t Time);

/*
** ===================================================================
**     Method      :  DISPLAY_SYNC_PWM0_SetDutyReal (component PWM_LDD)
**     Description :
**         This method sets the new duty value of the output signal.
**         The duty is expressed in seconds as a real number. In order
**         to use this method the compiler have to support floating
**         point operations. The method is available only if it is not
**         selected list of predefined values in <Starting pulse width>
**         property.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Time            - Duty to set [in seconds]
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_MATH - Overflow during evaluation
**                           ERR_RANGE - Parameter out of range
** ===================================================================
*/
LDD_TError DISPLAY_SYNC_PWM0_SetDutyReal(LDD_TDeviceData *DeviceDataPtr, LDD_TimerUnit_Tfloat Time);

/* END DISPLAY_SYNC_PWM0. */

#endif 
/* ifndef __DISPLAY_SYNC_PWM0_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0.12 [05.05]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
