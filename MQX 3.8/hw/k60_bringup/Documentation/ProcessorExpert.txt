=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "SPI0_WIFI" (component SPIMaster_LDD)
   - SPI0_WIFI_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - SPI0_WIFI_Deinit -This method deinitializes the device. It switches off the device, frees the device data structure memory,
                interrupts vectors, etc.
   - SPI0_WIFI_SendBlock -This method sends a block of characters. The method returns ERR_BUSY when the previous block 
                transmission is not completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation.
   - SPI0_WIFI_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the 
                specified number of characters is received. The method <CancelBlockReception> can be used to cancel a running 
                receive operation.
   - SPI0_WIFI_GetSentDataNum -Returns the number of sent characters. This method is available only if method SendBlock is 
                enabled.
   - SPI0_WIFI_GetReceivedDataNum -Returns the number of received characters in the receive buffer. This method is available 
                only if the ReceiveBlock method is enabled.
   - SPI0_WIFI_GetError -This method returns a set of asserted flags. The flags are accumulated in the set. After calling this 
                method the set is returned and cleared. This method is enabled when SPI device support error detect.

Module "PORTA_GPIO" (component Init_GPIO_VAR0)
   - PORTA_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "PORTB_GPIO" (component Init_GPIO_VAR0)
   - PORTB_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "SPI1_Accel" (component SPIMaster_LDD)
   - SPI1_Accel_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - SPI1_Accel_Deinit -This method deinitializes the device. It switches off the device, frees the device data structure 
                memory, interrupts vectors, etc.
   - SPI1_Accel_SendBlock -This method sends a block of characters. The method returns ERR_BUSY when the previous block 
                transmission is not completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation.
   - SPI1_Accel_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the 
                specified number of characters is received. The method <CancelBlockReception> can be used to cancel a running 
                receive operation.
   - SPI1_Accel_GetSentDataNum -Returns the number of sent characters. This method is available only if method SendBlock is 
                enabled.
   - SPI1_Accel_GetReceivedDataNum -Returns the number of received characters in the receive buffer. This method is available 
                only if the ReceiveBlock method is enabled.
   - SPI1_Accel_GetError -This method returns a set of asserted flags. The flags are accumulated in the set. After calling this 
                method the set is returned and cleared. This method is enabled when SPI device support error detect.

Module "DISPLAY_SYNC_PWM0" (component PWM_LDD)
   - DISPLAY_SYNC_PWM0_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt 
                vectors and sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. 
                code"> is set to "yes" value then the device is also enabled (see the description of the <Enable> method). In 
                this case the <Enable> method is not necessary and needn't to be generated. This method can be called only once.
                Before the second call of Init the <Deinit> must be called first.
   - DISPLAY_SYNC_PWM0_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.
   - DISPLAY_SYNC_PWM0_Enable -Enables the component - it starts the signal generation. Events may be generated (see 
                SetEventMask).
   - DISPLAY_SYNC_PWM0_Disable -Disables the component - it stops signal generation and events calling.
   - DISPLAY_SYNC_PWM0_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer 
                number. 0 - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected 
                list of predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - DISPLAY_SYNC_PWM0_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in 
                microseconds as a 16-bit unsigned integer number. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.
   - DISPLAY_SYNC_PWM0_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in 
                milliseconds as a 16-bit unsigned integer number. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.
   - DISPLAY_SYNC_PWM0_SetDutySec -This method sets the new duty value of the output signal. The duty is expressed in seconds 
                as a 16-bit unsigned integer number. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.
   - DISPLAY_SYNC_PWM0_SetDutyReal -This method sets the new duty value of the output signal. The duty is expressed in seconds 
                as a real number. In order to use this method the compiler have to support floating point operations. The 
                method is available only if it is not selected list of predefined values in <Starting pulse width> property.

Module "PORTC_GPIO" (component Init_GPIO_VAR0)
   - PORTC_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors, 
                etc.
   - TU1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU1_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - TU1_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - TU1_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TU1_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - TU1_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.
   - TU1_SelectOutputAction -Sets the type of compare match and counter overflow action on channel output. This method is 
                available when at least one channel is configured.

Module "I2C1"      (component I2C_LDD)
   - I2C1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - I2C1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors,
                etc.
   - I2C1_Enable -Enables I2C component. Events may be generated ("DisableEvent"/"EnableEvent").
   - I2C1_Disable -Disables I2C component. No events will be generated.
   - I2C1_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes inclusive 
                of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address must be 
                specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target slave 
                address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. The 
                state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent are 
                not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2C1_MasterGetBlockSentStatus -This method returns current state of MasterSendBlock method. This method is available only 
                for the MASTER mode and if method MasterSendBlock is enabled.
   - I2C1_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2C1_MasterGetBlockReceivedStatus -This method returns current state of MasterReceiveBlock method. This method is 
                available only for the MASTER mode and if method MasterReceiveBlock is enabled.
   - I2C1_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or general 
                call value. Any send or receive method directs to or from selected device, until a new slave device is selected 
                by this method. This method is available for the MASTER mode.
   - I2C1_GetError -Returns value of error mask, e.g. LDD_I2C_ARBIT_LOST.

Module "SPI2_Flash" (component SPIMaster_LDD)
   - SPI2_Flash_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - SPI2_Flash_Deinit -This method deinitializes the device. It switches off the device, frees the device data structure 
                memory, interrupts vectors, etc.
   - SPI2_Flash_SendBlock -This method sends a block of characters. The method returns ERR_BUSY when the previous block 
                transmission is not completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation.
   - SPI2_Flash_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the 
                specified number of characters is received. The method <CancelBlockReception> can be used to cancel a running 
                receive operation.
   - SPI2_Flash_GetSentDataNum -Returns the number of sent characters. This method is available only if method SendBlock is 
                enabled.
   - SPI2_Flash_GetReceivedDataNum -Returns the number of received characters in the receive buffer. This method is available 
                only if the ReceiveBlock method is enabled.
   - SPI2_Flash_GetBlockSentStatus -This method returns whether the transmitter is finished transmitting all data block. This 
                method is available only if method SendBlock is enabled.
   - SPI2_Flash_GetBlockReceivedStatus -This method returns whether the receiver is finished reception of all data block. This 
                method is available only if method ReceiveBlock is enabled.
   - SPI2_Flash_GetError -This method returns a set of asserted flags. The flags are accumulated in the set. After calling this 
                method the set is returned and cleared. This method is enabled when SPI device support error detect.

Module "UART3_WIFI" (component Serial_LDD)
   - UART3_WIFI_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - UART3_WIFI_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - UART3_WIFI_Enable -Enables the device, starts the transmitting and receiving.
   - UART3_WIFI_Disable -Disables the device, stops the transmitting and receiving.
   - UART3_WIFI_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled.
   - UART3_WIFI_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number 
                of characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation.
   - UART3_WIFI_GetSentDataNum -Returns the number of sent characters.
   - UART3_WIFI_GetReceivedDataNum -Returns the number of received characters in the receive buffer.
   - UART3_WIFI_GetTxCompleteStatus -Returns whether the transmitter has transmitted all characters and there are no other 
                characters in the transmitter's HW FIFO or the shift register. This method is available only if a peripheral 
                supports this feature.

Module "PORTD_GPIO" (component Init_GPIO_VAR0)
   - PORTD_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "PORTE_GPIO" (component Init_GPIO_VAR0)
   - PORTE_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "UART0_BT"  (component Serial_LDD)
   - UART0_BT_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - UART0_BT_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - UART0_BT_Enable -Enables the device, starts the transmitting and receiving.
   - UART0_BT_Disable -Disables the device, stops the transmitting and receiving.
   - UART0_BT_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled.
   - UART0_BT_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number of 
                characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation.
   - UART0_BT_GetSentDataNum -Returns the number of sent characters.
   - UART0_BT_GetReceivedDataNum -Returns the number of received characters in the receive buffer.

Module "UART5_DBG" (component Serial_LDD)
   - UART5_DBG_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - UART5_DBG_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - UART5_DBG_Enable -Enables the device, starts the transmitting and receiving.
   - UART5_DBG_Disable -Disables the device, stops the transmitting and receiving.
   - UART5_DBG_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled.
   - UART5_DBG_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number of 
                characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation.
   - UART5_DBG_GetSentDataNum -Returns the number of sent characters.
   - UART5_DBG_GetReceivedDataNum -Returns the number of received characters in the receive buffer.
   - UART5_DBG_GetTxCompleteStatus -Returns whether the transmitter has transmitted all characters and there are no other 
                characters in the transmitter's HW FIFO or the shift register. This method is available only if a peripheral 
                supports this feature.

Module "Sleep_Timer_LDD" (component TimerInt_LDD)
   - Sleep_Timer_LDD_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors 
                and sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is 
                set to "yes" value then the device is also enabled (see the description of the <Enable> method). In this case 
                the <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before 
                the second call of Init the <Deinit> must be called first.
   - Sleep_Timer_LDD_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.

Module "TU2"       (component TimerUnit_LDD)
   - TU2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU2_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors, 
                etc.

Module "ADC0_Vsense" (component ADC_LDD)
   - ADC0_Vsense_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - ADC0_Vsense_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - ADC0_Vsense_Enable -Enables ADC device. If possible, this method switches on A/D converter device, voltage reference, etc. 
                This method is intended to be used together with <Disable()> method to temporary switch On/Off the device after 
                the device is initialized. This method is required if the <Enabled in init. code> property is set to "no" value.
   - ADC0_Vsense_Disable -Disables the ADC device. If possible, this method switches off A/D converter device, voltage 
                reference, etc. (for example to avoid power consumption and possible interference). When the device is disabled,
                some component methods should not be called. If so, error ERR_DISABLED is reported. This method is intended to 
                be used together with <Enable()> method to temporary switch On/Off the device after the device is initialized. 
                This method is not required. The <Deinit()> method can be used to switch off and uninstall the device.
   - ADC0_Vsense_StartSingleMeasurement -This method starts one measurement of the selected group of samples and exits 
                immediately. The group of samples for measurement is specified by preceding call to <SelectSampleGroup()> or 
                <SelectSampleGroup()> method. The <OnMeasurementComplete() > event is invoked after the measurement is done and 
                the event is enabled. The state of the measurement can be also polled by the <GetMeasurementCompleteStatus()> 
                method. Results of the measurement can be read by the <GetMeasuredValues()> method. The <Discontinuous mode> 
                doesn't support this method.
   - ADC0_Vsense_CreateSampleGroup -This method prepares HW for next measurement according to array of samples defined during 
                run-time. The array of samples should be prepared prior to calling this method. Pointer to the array is passed 
                into this method in parameter SampleGroupPtr. The number of samples is defined by parameter SampleCount. Once 
                any group is prepared, the measurement can be started multiple times. Note: This method works only with the 
                sample groups defined during run-time. For design-time defined groups use <SelectSampleGroup()> method.
   - ADC0_Vsense_GetMeasuredValues -This method copies results of the last measurement to the user supplied buffer. Data size 
                depends on the size of measured sample group (see <SelectSampleGroup()> or <CreateSampleGroup()> method). Data 
                representation is defined by the <Result type> property. Typically this method is called from 
                <OnMeasurementComplete> event to get results of the last measurement.
   - ADC0_Vsense_GetMeasurementCompleteStatus -Returns whether the measurement is done and the results can be read by the user. 
                It can be used to poll the state of measurement if <Interrupt service/event> is disabled or if 
                <OnMeasurementComplete> event is disabled by the <SetEventMask()> methods.
   - ADC0_Vsense_StartCalibration -This method starts self calibration process. Calibration is typically used to remove the 
                effects of the gain and offset from a specific reading.
   - ADC0_Vsense_GetCalibrationResultStatus -This method should be used for check the last calibration result. If calibration 
                completed normally the method finish calibration process by writing gain calibration values.

Module "PORTB_GPIO_LDD" (component GPIO_LDD)
   - PORTB_GPIO_LDD_Init -This method initializes the associated peripheral(s) and the component internal variables. The method 
                is called automatically as a part of the application initialization code.
   - PORTB_GPIO_LDD_Deinit -This method disables the device and frees the device data structure memory.
   - PORTB_GPIO_LDD_SetFieldValue -This method sets the output data value of the specified bit field.
   - PORTB_GPIO_LDD_GetFieldValue -This method returns the current input data of the specified field.
   - PORTB_GPIO_LDD_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - PORTB_GPIO_LDD_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - PORTB_GPIO_LDD_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.
   - PORTB_GPIO_LDD_SetFieldInputDirection -This method sets all pins of the field to the input direction.
   - PORTB_GPIO_LDD_SetFieldOutputDirection -This method sets all pins of the field to the output direction.
   - PORTB_GPIO_LDD_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this 
                component. This method is only available for CPU derivatives and peripherals that support the runtime pin 
                sharing with other internal on-chip peripherals.

Module "PORTC_GPIO_LDD" (component GPIO_LDD)
   - PORTC_GPIO_LDD_Init -This method initializes the associated peripheral(s) and the component internal variables. The method 
                is called automatically as a part of the application initialization code.
   - PORTC_GPIO_LDD_Deinit -This method disables the device and frees the device data structure memory.
   - PORTC_GPIO_LDD_SetFieldValue -This method sets the output data value of the specified bit field.
   - PORTC_GPIO_LDD_GetFieldValue -This method returns the current input data of the specified field.
   - PORTC_GPIO_LDD_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - PORTC_GPIO_LDD_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - PORTC_GPIO_LDD_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.
   - PORTC_GPIO_LDD_SetFieldInputDirection -This method sets all pins of the field to the input direction.
   - PORTC_GPIO_LDD_SetFieldOutputDirection -This method sets all pins of the field to the output direction.

Module "PORTD_GPIO_LDD" (component GPIO_LDD)
   - PORTD_GPIO_LDD_Init -This method initializes the associated peripheral(s) and the component internal variables. The method 
                is called automatically as a part of the application initialization code.
   - PORTD_GPIO_LDD_Deinit -This method disables the device and frees the device data structure memory.
   - PORTD_GPIO_LDD_SetFieldValue -This method sets the output data value of the specified bit field.
   - PORTD_GPIO_LDD_GetFieldValue -This method returns the current input data of the specified field.
   - PORTD_GPIO_LDD_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - PORTD_GPIO_LDD_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - PORTD_GPIO_LDD_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.
   - PORTD_GPIO_LDD_SetFieldInputDirection -This method sets all pins of the field to the input direction.
   - PORTD_GPIO_LDD_SetFieldOutputDirection -This method sets all pins of the field to the output direction.
   - PORTD_GPIO_LDD_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this 
                component. This method is only available for CPU derivatives and peripherals that support the runtime pin 
                sharing with other internal on-chip peripherals.

Module "PORTE_GPIO_LDD" (component GPIO_LDD)
   - PORTE_GPIO_LDD_Init -This method initializes the associated peripheral(s) and the component internal variables. The method 
                is called automatically as a part of the application initialization code.
   - PORTE_GPIO_LDD_Deinit -This method disables the device and frees the device data structure memory.
   - PORTE_GPIO_LDD_SetFieldValue -This method sets the output data value of the specified bit field.
   - PORTE_GPIO_LDD_GetFieldValue -This method returns the current input data of the specified field.
   - PORTE_GPIO_LDD_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - PORTE_GPIO_LDD_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - PORTE_GPIO_LDD_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.
   - PORTE_GPIO_LDD_SetFieldInputDirection -This method sets all pins of the field to the input direction.
   - PORTE_GPIO_LDD_SetFieldOutputDirection -This method sets all pins of the field to the output direction.
   - PORTE_GPIO_LDD_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this 
                component. This method is only available for CPU derivatives and peripherals that support the runtime pin 
                sharing with other internal on-chip peripherals.

Module "USB_CORONA" (component Init_USB_OTG_VAR0)
   - USB_CORONA_Init -This method initializes registers of the USB_OTG module according to the Peripheral Initialization 
                settings. Call this method in user code to initialize the module. By default, the method is called by PE 
                automatically; see "Call Init method" property of the component for more details.

Module "RNG1"      (component RNG_LDD)
   - RNG1_Init -Initializes the device according to design-time configuration properties. Allocates memory for the device data 
                structure.   This method can be called only once. Before the second call of Init the Deinit method must be 
                called first.
   - RNG1_SetEventMask -This method masks the events of the interrupts generated by errors or interrupts generated upon 
                completion of seed and self test modes in the RNGB.
   - RNG1_GetEventMask -This Methods returns the status of the interrupt error masks and interrupt completion masks.
   - RNG1_GetStatus -This method returns the value of the RNG status register. Use this method to poll status of RNG when 
                interrupts are disabled.
   - RNG1_InsertEntropy -Use this method to insert additional entropy to RNGA (current time using highest precision possible, 
                mouse and keyboard motions...).
   - RNG1_GetRandomNumber -This method gets the next random number generated by the RNG.

Module "Cpu"       (component MK60DN512MC10)

===================================================================================
