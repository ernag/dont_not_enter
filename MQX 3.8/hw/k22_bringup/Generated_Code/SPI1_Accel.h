/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : SPI1_Accel.h
**     Project     : ProcessorExpert
**     Processor   : MK20DN512VMC10
**     Component   : SPIMaster_LDD
**     Version     : Component 01.084, Driver 01.07, CPU db: 3.00.000
**     Compiler    : CodeWarrior ARM C Compiler
**     Date/Time   : 2013-02-07, 11:29, # CodeGen: 57
**     Abstract    :
**         This component "SPIMaster_LDD" implements MASTER part of synchronous
**         serial master-slave communication.
**     Settings    :
**          Component name                                 : SPI1_Accel
**          Device                                         : SPI1
**          Interrupt service/event                        : Enabled
**            Input interrupt                              : INT_SPI1
**            Input interrupt priority                     : medium priority
**            Output interrupt                             : INT_SPI1
**            Output interrupt priority                    : medium priority
**          Settings                                       : 
**            Input pin                                    : Enabled
**              Pin                                        : TSI0_CH10/PTB17/SPI1_SIN/UART0_TX/FB_AD16/EWM_OUT_b
**              Pin signal                                 : SPI_ACCEL_MISO
**            Output pin                                   : Enabled
**              Pin                                        : TSI0_CH9/PTB16/SPI1_SOUT/UART0_RX/FB_AD17/EWM_IN
**              Pin signal                                 : SPI_ACCEL_MOSI
**            Clock pin                                    : 
**              Pin                                        : ADC1_SE15/PTB11/SPI1_SCK/UART3_TX/FB_AD18/FTM0_FLT2
**              Pin signal                                 : SPI_ACCEL_SCK
**            Chip select list                             : 1
**              Chip select 0                              : 
**                Pin                                      : ADC1_SE14/PTB10/SPI1_PCS0/UART3_RX/FB_AD19/FTM0_FLT1
**                Pin signal                               : SPI_ACCEL_CS0
**                Active level                             : Low
**            CS external demultiplexer                    : Disabled
**            Attribute set list                           : 1
**              Attribute set 0                            : 
**                Width                                    : 8 bits
**                MSB first                                : yes
**                Clock polarity                           : High
**                Clock phase                              : Capture on leading edge
**                Parity                                   : None
**                Chip select toggling                     : no
**                Clock rate index                         : 0
**                Delay between chars index                : 0
**                CS to CLK delay index                    : 0
**                CLK to CS delay index                    : 0
**            Clock rate                                   : 2.002716 탎
**            Delay between chars                          : 0.095367 탎
**            CS to CLK delay                              : 1.144409 탎
**            CLK to CS delay                              : 1.144409 탎
**            HW input buffer size                         : 1
**            HW input watermark                           : 1
**            HW output buffer size                        : 1
**            HW output watermark                          : 1
**          Initialization                                 : 
**            Initial chip select                          : 0
**            Initial attribute set                        : 0
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnBlockSent                                : Enabled
**              OnBlockReceived                            : Enabled
**              OnError                                    : Enabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init                    - LDD_TDeviceData* SPI1_Accel_Init(LDD_TUserData *UserDataPtr);
**         Deinit                  - void SPI1_Accel_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         Enable                  - LDD_TError SPI1_Accel_Enable(LDD_TDeviceData *DeviceDataPtr);
**         Disable                 - LDD_TError SPI1_Accel_Disable(LDD_TDeviceData *DeviceDataPtr);
**         SetEventMask            - LDD_TError SPI1_Accel_SetEventMask(LDD_TDeviceData *DeviceDataPtr,...
**         GetEventMask            - LDD_TEventMask SPI1_Accel_GetEventMask(LDD_TDeviceData *DeviceDataPtr);
**         SendBlock               - LDD_TError SPI1_Accel_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData...
**         ReceiveBlock            - LDD_TError SPI1_Accel_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData...
**         GetSentDataNum          - uint16_t SPI1_Accel_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr);
**         GetReceivedDataNum      - uint16_t SPI1_Accel_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr);
**         GetBlockSentStatus      - bool SPI1_Accel_GetBlockSentStatus(LDD_TDeviceData *DeviceDataPtr);
**         GetBlockReceivedStatus  - bool SPI1_Accel_GetBlockReceivedStatus(LDD_TDeviceData *DeviceDataPtr);
**         CancelBlockTransmission - LDD_TError SPI1_Accel_CancelBlockTransmission(LDD_TDeviceData *DeviceDataPtr);
**         CancelBlockReception    - LDD_TError SPI1_Accel_CancelBlockReception(LDD_TDeviceData *DeviceDataPtr);
**         GetError                - LDD_TError SPI1_Accel_GetError(LDD_TDeviceData *DeviceDataPtr,...
**         GetStats                - LDD_SPIMASTER_TStats SPI1_Accel_GetStats(LDD_TDeviceData *DeviceDataPtr);
**         ClearStats              - void SPI1_Accel_ClearStats(LDD_TDeviceData *DeviceDataPtr);
**         SetOperationMode        - LDD_TError SPI1_Accel_SetOperationMode(LDD_TDeviceData *DeviceDataPtr,...
**         GetDriverState          - LDD_TDriverState SPI1_Accel_GetDriverState(LDD_TDeviceData *DeviceDataPtr);
**         ConnectPin              - LDD_TError SPI1_Accel_ConnectPin(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask...
**
**     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __SPI1_Accel_H
#define __SPI1_Accel_H

/* MODULE SPI1_Accel. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "Cpu.h"
#include "SPI_PDD.h"
#include "PE_LDD.h"


/* Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define SPI1_Accel_PRPH_BASE_ADDRESS  0x4002D000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define SPI1_Accel_Init_METHOD_ENABLED
#define SPI1_Accel_Deinit_METHOD_ENABLED
#define SPI1_Accel_Enable_METHOD_ENABLED
#define SPI1_Accel_Disable_METHOD_ENABLED
#define SPI1_Accel_SetEventMask_METHOD_ENABLED
#define SPI1_Accel_GetEventMask_METHOD_ENABLED
#define SPI1_Accel_SendBlock_METHOD_ENABLED
#define SPI1_Accel_ReceiveBlock_METHOD_ENABLED
#define SPI1_Accel_GetSentDataNum_METHOD_ENABLED
#define SPI1_Accel_GetReceivedDataNum_METHOD_ENABLED
#define SPI1_Accel_GetBlockSentStatus_METHOD_ENABLED
#define SPI1_Accel_GetBlockReceivedStatus_METHOD_ENABLED
#define SPI1_Accel_CancelBlockTransmission_METHOD_ENABLED
#define SPI1_Accel_CancelBlockReception_METHOD_ENABLED
#define SPI1_Accel_GetError_METHOD_ENABLED
#define SPI1_Accel_GetStats_METHOD_ENABLED
#define SPI1_Accel_ClearStats_METHOD_ENABLED
#define SPI1_Accel_SetOperationMode_METHOD_ENABLED
#define SPI1_Accel_GetDriverState_METHOD_ENABLED
#define SPI1_Accel_ConnectPin_METHOD_ENABLED

/* Events configuration constants - generated for all enabled component's events */
#define SPI1_Accel_OnBlockSent_EVENT_ENABLED
#define SPI1_Accel_OnBlockReceived_EVENT_ENABLED
#define SPI1_Accel_OnError_EVENT_ENABLED

#define SPI1_Accel_CHIP_SELECT_COUNT 1U /* Number of chip selects */
#define SPI1_Accel_CONFIGURATION_COUNT 1U /* Number of predefined configurations */

/* Communication error data type */


LDD_TDeviceData* SPI1_Accel_Init(LDD_TUserData *UserDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_Init (component SPIMaster_LDD)
**
**     Description :
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc.
**         If the "Enable in init. code" is set to "yes" value then the
**         device is also enabled(see the description of the Enable()
**         method). In this case the Enable() method is not necessary
**         and needn't to be generated. 
**         This method can be called only once. Before the second call
**         of Init() the Deinit() must be called first.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     Returns     :
**         ---             - Device data structure pointer.
** ===================================================================
*/

void SPI1_Accel_Deinit(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_Deinit (component SPIMaster_LDD)
**
**     Description :
**         This method deinitializes the device. It switches off the
**         device, frees the device data structure memory, interrupts
**         vectors, etc.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     : Nothing
** ===================================================================
*/

LDD_TError SPI1_Accel_Enable(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_Enable (component SPIMaster_LDD)
**
**     Description :
**         This method enables SPI device. This method is intended to
**         be used together with <Disable()> method to temporary switch
**         On/Off the device after the device is initialized. This
**         method is required if the <Enabled in init. code> property
**         is set to "no" value.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
** ===================================================================
*/

LDD_TError SPI1_Accel_Disable(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_Disable (component SPIMaster_LDD)
**
**     Description :
**         Disables the SPI device. When the device is disabled, some
**         component methods should not be called. If so, error
**         ERR_DISABLED may be reported. This method is intended to be
**         used together with <Enable()> method to temporary switch
**         on/off the device after the device is initialized. This
**         method is not required. The <Deinit()> method can be used to
**         switch off and uninstall the device.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
** ===================================================================
*/

LDD_TEventMask SPI1_Accel_GetEventMask(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_GetEventMask (component SPIMaster_LDD)
**
**     Description :
**         Returns current events mask. Note: Event that are not
**         generated (See the "Method" tab in the Component inspector)
**         are not handled by this method. See also method
**         <SetEventMask>.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Current EventMask. The component event
**                           masks are defined in the PE_LDD.h file.
** ===================================================================
*/

LDD_TError SPI1_Accel_SetEventMask(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask);
/*
** ===================================================================
**     Method      :  SPI1_Accel_SetEventMask (component SPIMaster_LDD)
**
**     Description :
**         Enables/disables event(s). The events contained within the
**         mask are enabled. Events not contained within the mask are
**         disabled. The component event masks are defined in the
**         PE_LDD.h file. Note: Event that are not generated (See the
**         "Method" tab in the Component inspector) are not handled by
**         this method. In this case the method returns ERR_PARAM_MASK
**         error code. See also method <GetEventMask>.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         EventMask       - Current EventMask. The
**                           component event masks are defined in the
**                           PE_LDD.h file.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - The component or device is
**                           disabled.
**                           ERR_PARAM_MASK - Invalid event mask.
** ===================================================================
*/

LDD_TError SPI1_Accel_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size);
/*
** ===================================================================
**     Method      :  SPI1_Accel_ReceiveBlock (component SPIMaster_LDD)
**
**     Description :
**         This method specifies the number of data to receive. The
**         method returns ERR_BUSY until the specified number of
**         characters is received. The method <CancelBlockReception>
**         can be used to cancel a running receive operation.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * BufferPtr       - Pointer to A buffer where
**                           received characters will be stored.
**         Size            - Size of the block
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active clock configuration
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - The previous receive request is
**                           pending
** ===================================================================
*/

LDD_TError SPI1_Accel_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size);
/*
** ===================================================================
**     Method      :  SPI1_Accel_SendBlock (component SPIMaster_LDD)
**
**     Description :
**         This method sends a block of characters. The method returns
**         ERR_BUSY when the previous block transmission is not
**         completed. The method <CancelBlockTransmission> can be used
**         to cancel a transmit operation.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * BufferPtr       - Pointer to the block of data
**                           to send.
**         Size            - Number of characters in the buffer.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active clock configuration
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - The previous transmit request is
**                           pending
** ===================================================================
*/

uint16_t SPI1_Accel_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_GetReceivedDataNum (component SPIMaster_LDD)
**
**     Description :
**         Returns the number of received characters in the receive
**         buffer. This method is available only if the ReceiveBlock
**         method is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - The number of characters in the input
**                           buffer.
** ===================================================================
*/

uint16_t SPI1_Accel_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_GetSentDataNum (component SPIMaster_LDD)
**
**     Description :
**         Returns the number of sent characters. This method is
**         available only if method SendBlock is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - The number of characters in the output
**                           buffer.
** ===================================================================
*/

bool SPI1_Accel_GetBlockSentStatus(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_GetBlockSentStatus (component SPIMaster_LDD)
**
**     Description :
**         This method returns whether the transmitter is finished
**         transmitting all data block. This method is available only
**         if method SendBlock is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Return value:
**                           true - Data block is completely transmitted
**                           false - Data block isn't completely
**                           transmitted.
** ===================================================================
*/

bool SPI1_Accel_GetBlockReceivedStatus(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_GetBlockReceivedStatus (component SPIMaster_LDD)
**
**     Description :
**         This method returns whether the receiver is finished
**         reception of all data block. This method is available only
**         if method ReceiveBlock is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Return value:
**                           true - Data block is completely received
**                           false - Data block isn't completely received
** ===================================================================
*/

LDD_TError SPI1_Accel_CancelBlockTransmission(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_CancelBlockTransmission (component SPIMaster_LDD)
**
**     Description :
**         Immediately cancels running transmit process. Unsent data
**         will never been sent. This method is available only if the
**         SendBlock method is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active clock configuration
**                           ERR_DISABLED - Component is disabled
** ===================================================================
*/

LDD_TError SPI1_Accel_CancelBlockReception(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_CancelBlockReception (component SPIMaster_LDD)
**
**     Description :
**         Immediately cancels the running receive process started by
**         the ReceiveBlock method. Characters already stored in the HW
**         buffer will be lost. This method is available only if the
**         ReceiveBlock method is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active clock configuration
**                           ERR_DISABLED - Component is disabled
** ===================================================================
*/

LDD_TError SPI1_Accel_GetError(LDD_TDeviceData *DeviceDataPtr, LDD_SPIMASTER_TError *ErrorPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_GetError (component SPIMaster_LDD)
**
**     Description :
**         This method returns a set of asserted flags. The flags are
**         accumulated in the set. After calling this method the set is
**         returned and cleared. This method is enabled when SPI device
**         support error detect.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * ErrorPtr        - A pointer to the returned set of
**                           error flags:
**                           LDD_SPIMASTER_RX_OVERFLOW - Receiver
**                           overflow
**                           LDD_SPIMASTER_PARITY_ERROR - Parity error
**                           (only if HW supports parity feature)
**     Returns     :
**         ---             - Error code (if GetError did not succeed),
**                           possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active clock configuration
**                           ERR_DISABLED - Component is disabled
** ===================================================================
*/

LDD_TError SPI1_Accel_ConnectPin(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask);
/*
** ===================================================================
**     Method      :  SPI1_Accel_ConnectPin (component SPIMaster_LDD)
**
**     Description :
**         This method reconnects the requested pin associated with the
**         selected peripheral in this component. This method is only
**         available for CPU derivatives and peripherals that support
**         the runtime pin sharing with other internal on-chip
**         peripherals.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         PinMask         - Mask for the requested pins. The
**                           peripheral pins are reconnected according
**                           to this mask.
**                           Possible parameters:
**                           LDD_SPIMASTER_INPUT_PIN - Input pin
**                           LDD_SPIMASTER_OUTPUT_PIN - Output pin
**                           LDD_SPIMASTER_CLK_PIN - Clock pin
**                           LDD_SPIMASTER_CS_X_PIN - Chip select pin
**                           LDD_SPIMASTER_CSS_PIN - Chip select strobe
**                           pin
**     Returns     :
**         ---             - Error code, possible values:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
**                           ERR_PARAM_MASK - Invalid pin mask
** ===================================================================
*/

/* {Default RTOS Adapter} ISR function prototype */
PE_ISR(SPI1_Accel_Interrupt);
/*
** ===================================================================
**     Method      :  SPI1_Accel_Interrupt (component SPIMaster_LDD)
**
**     Description :
**         The ISR function handling the device receive/transmit 
**         interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

LDD_TError SPI1_Accel_SetOperationMode(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_SetOperationMode (component SPIMaster_LDD)
**
**     Description :
**         This method requests to change the component's operation
**         mode. Upon a request to change the operation mode, the
**         component will finish a pending job first and then notify a
**         caller that an operation mode has been changed. When no job
**         is pending (ERR_OK), the component changes an operation mode
**         immediately and notify a caller about this change. 
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         OperationMode   - Requested driver
**                           operation mode.
**         ModeChangeCallback - Callback to
**                           notify the upper layer once a mode has been
**                           changed.
**       * ModeChangeCallbackParamPtr 
**                           - Pointer to callback parameter to notify
**                           the upper layer once a mode has been
**                           changed.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - The change operation mode request
**                           has been accepted, callback will notify an
**                           application as soon as the mode is changed.
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration.
**                           ERR_DISABLED - This component is disabled
**                           by user.
**                           ERR_PARAM_MODE - Invalid operation mode.
**                           ERR_BUSY - Job is running and the driver
**                           can't detect job end by itself. The
**                           approximate end of the job can be detected
**                           by method GetDriverState. The actual
**                           transmission/reception finishes later. It
**                           depends on component settings (data width,
**                           timing, size of HW buffer, etc.).
** ===================================================================
*/

LDD_TDriverState SPI1_Accel_GetDriverState(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_GetDriverState (component SPIMaster_LDD)
**
**     Description :
**         This method returns the current driver status.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - The current driver status mask.
**                           Following status masks defined in PE_LDD.h
**                           can be used to check the current driver
**                           status.
**                           PE_LDD_DRIVER_DISABLED_IN_CLOCK_CONFIGURATIO
**                           N - 1 - Driver is disabled in the current
**                           mode; 0 - Driver is enabled in the current
**                           mode.  
**                           PE_LDD_DRIVER_DISABLED_BY_USER - 1 - Driver
**                           is disabled by the user; 0 - Driver is
**                           enabled by the user.        
**                           PE_LDD_DRIVER_BUSY - 1 - Driver is the BUSY
**                           state; 0 - Driver is in the IDLE state.
** ===================================================================
*/

LDD_SPIMASTER_TStats SPI1_Accel_GetStats(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_GetStats (component SPIMaster_LDD)
**
**     Description :
**         Returns communication statistics (e.g. sent character count,
**         parity error count).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - The actual communication statistics.
** ===================================================================
*/

void SPI1_Accel_ClearStats(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SPI1_Accel_ClearStats (component SPIMaster_LDD)
**
**     Description :
**         Clears the communication statistics. This method is
**         available only if the GetStats method is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     : Nothing
** ===================================================================
*/

/* END SPI1_Accel. */

#endif
/* ifndef __SPI1_Accel_H */
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0 [05.03]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
