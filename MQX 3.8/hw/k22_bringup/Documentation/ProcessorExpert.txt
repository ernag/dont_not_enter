=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "PORTD_GPIO" (component Init_GPIO_VAR0)
   - PORTD_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "PORTC_GPIO" (component Init_GPIO_VAR0)
   - PORTC_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "PORTE_GPIO" (component Init_GPIO_VAR0)
   - PORTE_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "PORTA_GPIO" (component Init_GPIO_VAR0)
   - PORTA_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "SPI1_Accel" (component SPIMaster_LDD)
   - SPI1_Accel_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - SPI1_Accel_Deinit -This method deinitializes the device. It switches off the device, frees the device data structure 
                memory, interrupts vectors, etc.
   - SPI1_Accel_Enable -This method enables SPI device. This method is intended to be used together with <Disable()> method to 
                temporary switch On/Off the device after the device is initialized. This method is required if the <Enabled in 
                init. code> property is set to "no" value.
   - SPI1_Accel_Disable -Disables the SPI device. When the device is disabled, some component methods should not be called. If 
                so, error ERR_DISABLED may be reported. This method is intended to be used together with <Enable()> method to 
                temporary switch on/off the device after the device is initialized. This method is not required. The <Deinit()> 
                method can be used to switch off and uninstall the device.
   - SPI1_Accel_SetEventMask -Enables/disables event(s). The events contained within the mask are enabled. Events not contained 
                within the mask are disabled. The component event masks are defined in the PE_LDD.h file. Note: Event that are 
                not generated (See the "Method" tab in the Component inspector) are not handled by this method. In this case 
                the method returns ERR_PARAM_MASK error code. See also method <GetEventMask>.
   - SPI1_Accel_GetEventMask -Returns current events mask. Note: Event that are not generated (See the "Method" tab in the 
                Component inspector) are not handled by this method. See also method <SetEventMask>.
   - SPI1_Accel_SendBlock -This method sends a block of characters. The method returns ERR_BUSY when the previous block 
                transmission is not completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation.
   - SPI1_Accel_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the 
                specified number of characters is received. The method <CancelBlockReception> can be used to cancel a running 
                receive operation.
   - SPI1_Accel_GetSentDataNum -Returns the number of sent characters. This method is available only if method SendBlock is 
                enabled.
   - SPI1_Accel_GetReceivedDataNum -Returns the number of received characters in the receive buffer. This method is available 
                only if the ReceiveBlock method is enabled.
   - SPI1_Accel_GetBlockSentStatus -This method returns whether the transmitter is finished transmitting all data block. This 
                method is available only if method SendBlock is enabled.
   - SPI1_Accel_GetBlockReceivedStatus -This method returns whether the receiver is finished reception of all data block. This 
                method is available only if method ReceiveBlock is enabled.
   - SPI1_Accel_CancelBlockTransmission -Immediately cancels running transmit process. Unsent data will never been sent. This 
                method is available only if the SendBlock method is enabled.
   - SPI1_Accel_CancelBlockReception -Immediately cancels the running receive process started by the ReceiveBlock method. 
                Characters already stored in the HW buffer will be lost. This method is available only if the ReceiveBlock 
                method is enabled.
   - SPI1_Accel_GetError -This method returns a set of asserted flags. The flags are accumulated in the set. After calling this 
                method the set is returned and cleared. This method is enabled when SPI device support error detect.
   - SPI1_Accel_GetStats -Returns communication statistics (e.g. sent character count, parity error count).
   - SPI1_Accel_ClearStats -Clears the communication statistics. This method is available only if the GetStats method is 
                enabled.
   - SPI1_Accel_SetOperationMode -This method requests to change the component's operation mode. Upon a request to change the 
                operation mode, the component will finish a pending job first and then notify a caller that an operation mode 
                has been changed. When no job is pending (ERR_OK), the component changes an operation mode immediately and 
                notify a caller about this change.
   - SPI1_Accel_GetDriverState -This method returns the current driver status.
   - SPI1_Accel_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this component. 
                This method is only available for CPU derivatives and peripherals that support the runtime pin sharing with 
                other internal on-chip peripherals.

Module "UART5_DBG" (component Serial_LDD)
   - UART5_DBG_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - UART5_DBG_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - UART5_DBG_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled.
   - UART5_DBG_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number of 
                characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation.
   - UART5_DBG_GetSentDataNum -Returns the number of sent characters.
   - UART5_DBG_GetReceivedDataNum -Returns the number of received characters in the receive buffer.
   - UART5_DBG_GetStats -Returns the driver's receive/transmit statistic information.

Module "SPI0_WIFI" (component SPIMaster_LDD)
   - SPI0_WIFI_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - SPI0_WIFI_Deinit -This method deinitializes the device. It switches off the device, frees the device data structure memory,
                interrupts vectors, etc.
   - SPI0_WIFI_SendBlock -This method sends a block of characters. The method returns ERR_BUSY when the previous block 
                transmission is not completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation.
   - SPI0_WIFI_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the 
                specified number of characters is received. The method <CancelBlockReception> can be used to cancel a running 
                receive operation.
   - SPI0_WIFI_GetSentDataNum -Returns the number of sent characters. This method is available only if method SendBlock is 
                enabled.
   - SPI0_WIFI_GetReceivedDataNum -Returns the number of received characters in the receive buffer. This method is available 
                only if the ReceiveBlock method is enabled.
   - SPI0_WIFI_GetError -This method returns a set of asserted flags. The flags are accumulated in the set. After calling this 
                method the set is returned and cleared. This method is enabled when SPI device support error detect.

Module "I2C_Display" (component I2C_LDD)
   - I2C_Display_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - I2C_Display_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - I2C_Display_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address 
                must be specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target 
                slave address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. 
                The state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent 
                are not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2C_Display_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2C_Display_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or 
                general call value. Any send or receive method directs to or from selected device, until a new slave device is 
                selected by this method. This method is available for the MASTER mode.
   - I2C_Display_GetError -Returns value of error mask, e.g. LDD_I2C_ARBIT_LOST.
   - I2C_Display_GetStats -Returns receive/transmit statistics.

Module "Sleep_Timer_LDD" (component TimerInt_LDD)
   - Sleep_Timer_LDD_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors 
                and sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is 
                set to "yes" value then the device is also enabled (see the description of the <Enable> method). In this case 
                the <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before 
                the second call of Init the <Deinit> must be called first.
   - Sleep_Timer_LDD_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors, 
                etc.

Module "UART2_BT_UART" (component Serial_LDD)
   - UART2_BT_UART_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors 
                and sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - UART2_BT_UART_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.
   - UART2_BT_UART_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is 
                not completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled.
   - UART2_BT_UART_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified 
                number of characters is received. Method <CancelBlockReception> can be used to cancel a running receive 
                operation.
   - UART2_BT_UART_GetSentDataNum -Returns the number of sent characters.
   - UART2_BT_UART_GetReceivedDataNum -Returns the number of received characters in the receive buffer.

Module "BT_PWDN_B" (component GPIO_LDD)
   - BT_PWDN_B_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - BT_PWDN_B_Deinit -This method disables the device and frees the device data structure memory.
   - BT_PWDN_B_SetFieldValue -This method sets the output data value of the specified bit field.
   - BT_PWDN_B_GetFieldValue -This method returns the current input data of the specified field.
   - BT_PWDN_B_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - BT_PWDN_B_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - BT_PWDN_B_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.
   - BT_PWDN_B_SetFieldInputDirection -This method sets all pins of the field to the input direction.
   - BT_PWDN_B_SetFieldOutputDirection -This method sets all pins of the field to the output direction.
   - BT_PWDN_B_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this component. 
                This method is only available for CPU derivatives and peripherals that support the runtime pin sharing with 
                other internal on-chip peripherals.

Module "WIFI_PD_B" (component GPIO_LDD)
   - WIFI_PD_B_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - WIFI_PD_B_Deinit -This method disables the device and frees the device data structure memory.
   - WIFI_PD_B_SetFieldValue -This method sets the output data value of the specified bit field.
   - WIFI_PD_B_GetFieldValue -This method returns the current input data of the specified field.
   - WIFI_PD_B_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - WIFI_PD_B_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - WIFI_PD_B_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.
   - WIFI_PD_B_SetFieldInputDirection -This method sets all pins of the field to the input direction.
   - WIFI_PD_B_SetFieldOutputDirection -This method sets all pins of the field to the output direction.
   - WIFI_PD_B_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this component. 
                This method is only available for CPU derivatives and peripherals that support the runtime pin sharing with 
                other internal on-chip peripherals.

Module "ADC0_Vsense" (component ADC_LDD)
   - ADC0_Vsense_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - ADC0_Vsense_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - ADC0_Vsense_Enable -Enables ADC device. If possible, this method switches on A/D converter device, voltage reference, etc. 
                This method is intended to be used together with <Disable()> method to temporary switch On/Off the device after 
                the device is initialized. This method is required if the <Enabled in init. code> property is set to "no" value.
   - ADC0_Vsense_Disable -Disables the ADC device. If possible, this method switches off A/D converter device, voltage 
                reference, etc. (for example to avoid power consumption and possible interference). When the device is disabled,
                some component methods should not be called. If so, error ERR_DISABLED is reported. This method is intended to 
                be used together with <Enable()> method to temporary switch On/Off the device after the device is initialized. 
                This method is not required. The <Deinit()> method can be used to switch off and uninstall the device.
   - ADC0_Vsense_StartSingleMeasurement -This method starts one measurement of the selected group of samples and exits 
                immediately. The group of samples for measurement is specified by preceding call to <SelectSampleGroup()> or 
                <SelectSampleGroup()> method. The <OnMeasurementComplete() > event is invoked after the measurement is done and 
                the event is enabled. The state of the measurement can be also polled by the <GetMeasurementCompleteStatus()> 
                method. Results of the measurement can be read by the <GetMeasuredValues()> method. The <Discontinuous mode> 
                doesn't support this method.
   - ADC0_Vsense_StartLoopMeasurement -This method starts periodic measurement of the selected group of and exits immediately. 
                The group of samples for measurement is specified by preceding call to <SelectSampleGroup()> or 
                <SelectSampleGroup()> method. The <OnMeasurementComplete()> event is invoked after the each measurement is done 
                and the event is enabled. The state of the measurement can be also polled by the 
                <GetMeasurementCompleteStatus()> method. Results of the measurement can be read by the <GetMeasuredValues()> 
                method. This method is available only if HW supports loop measurement. The <Discontinuous mode> doesn't support 
                this method.
   - ADC0_Vsense_CancelMeasurement -This method cancels the measurement in progress. Typically the OnMeasurementComplete() 
                event is not invoked for cancelled measurement.
   - ADC0_Vsense_CreateSampleGroup -This method prepares HW for next measurement according to array of samples defined during 
                run-time. The array of samples should be prepared prior to calling this method. Pointer to the array is passed 
                into this method in parameter SampleGroupPtr. The number of samples is defined by parameter SampleCount. Once 
                any group is prepared, the measurement can be started multiple times. Note: This method works only with the 
                sample groups defined during run-time. For design-time defined groups use <SelectSampleGroup()> method.
   - ADC0_Vsense_GetMeasuredValues -This method copies results of the last measurement to the user supplied buffer. Data size 
                depends on the size of measured sample group (see <SelectSampleGroup()> or <CreateSampleGroup()> method). Data 
                representation is defined by the <Result type> property. Typically this method is called from 
                <OnMeasurementComplete> event to get results of the last measurement.
   - ADC0_Vsense_GetMeasurementCompleteStatus -Returns whether the measurement is done and the results can be read by the user. 
                It can be used to poll the state of measurement if <Interrupt service/event> is disabled or if 
                <OnMeasurementComplete> event is disabled by the <SetEventMask()> methods.
   - ADC0_Vsense_StartCalibration -This method starts self calibration process. Calibration is typically used to remove the 
                effects of the gain and offset from a specific reading.
   - ADC0_Vsense_GetCalibrationResultStatus -This method should be used for check the last calibration result. If calibration 
                completed normally the method finish calibration process by writing gain calibration values.
   - ADC0_Vsense_SetOperationMode -This method requests to change the component's operation mode. Upon a request to change the 
                operation mode, the component will finish a pending job first and then notify a caller that an operation mode 
                has been changed. When no job is pending (ERR_OK), the component changes an operation mode immediately and 
                notifies a caller about this change.
   - ADC0_Vsense_GetDriverState -This method returns the current driver status.

Module "SPI2_Flash" (component SPIMaster_LDD)
   - SPI2_Flash_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - SPI2_Flash_Deinit -This method deinitializes the device. It switches off the device, frees the device data structure 
                memory, interrupts vectors, etc.
   - SPI2_Flash_SendBlock -This method sends a block of characters. The method returns ERR_BUSY when the previous block 
                transmission is not completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation.
   - SPI2_Flash_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the 
                specified number of characters is received. The method <CancelBlockReception> can be used to cancel a running 
                receive operation.
   - SPI2_Flash_GetSentDataNum -Returns the number of sent characters. This method is available only if method SendBlock is 
                enabled.
   - SPI2_Flash_GetReceivedDataNum -Returns the number of received characters in the receive buffer. This method is available 
                only if the ReceiveBlock method is enabled.
   - SPI2_Flash_GetError -This method returns a set of asserted flags. The flags are accumulated in the set. After calling this 
                method the set is returned and cleared. This method is enabled when SPI device support error detect.

Module "PORTB_GPIO" (component Init_GPIO_VAR0)
   - PORTB_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "Cpu"       (component MK20DN512MC10)

===================================================================================
