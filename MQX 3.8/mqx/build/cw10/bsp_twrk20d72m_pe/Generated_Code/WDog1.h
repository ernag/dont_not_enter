/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : WDog1.h
**     Project     : ProcessorExpert
**     Processor   : MK20DX256VLL7
**     Component   : WatchDog_LDD
**     Version     : Component 01.023, Driver 01.04, CPU db: 3.00.000
**     Compiler    : CodeWarrior ARM C Compiler
**     Date/Time   : 2012-03-09, 20:24, # CodeGen: 0
**     Abstract    :
**          The WatchDog component provides a high level API for unified hardware access
**          across various watchdog timer devices.
**     Settings    :
**          Component name                                 : WDog1
**          Device                                         : EWM
**          Action                                         : Output to pin
**            Input pin                                    : Disabled
**            Output pin                                   : Enabled
**              Pin                                        : ADC0_SE17/PTE24/UART4_TX/EWM_OUT_b
**              Output pin signal                          : 
**          Period                                         : 255 ms
**          Windowed mode                                  : Enabled
**            Window                                       : 150
**          Initialization                                 : 
**            Enabled in init. code                        : no
**            Protected                                    : no
**            Auto initialization                          : no
**          CPU clock/configuration selection              : Ignored
**     Contents    :
**         Init    - LDD_TDeviceData* WDog1_Init(LDD_TUserData *UserDataPtr);
**         Deinit  - void WDog1_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         Enable  - LDD_TError WDog1_Enable(LDD_TDeviceData *DeviceDataPtr);
**         Disable - LDD_TError WDog1_Disable(LDD_TDeviceData *DeviceDataPtr);
**         Clear   - LDD_TError WDog1_Clear(LDD_TDeviceData *DeviceDataPtr);
**
**     Copyright : 1997 - 2012 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __WDog1_H
#define __WDog1_H

/* MODULE WDog1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "PE_LDD.h"
#include "EWM_PDD.h"
#include "Cpu.h"


#define WDog1_WATCHDOG_TIMEOUT 0.248F  /* Initialization watchdog timeout period in seconds. */
#define WDog1_WATCHDOG_WINDOW 0.15F    /* Initialization watchdog window period in seconds as real number. */

/* Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define WDog1_PRPH_BASE_ADDRESS  0x40061000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define WDog1_Init_METHOD_ENABLED
#define WDog1_Deinit_METHOD_ENABLED
#define WDog1_Enable_METHOD_ENABLED
#define WDog1_Disable_METHOD_ENABLED
#define WDog1_Clear_METHOD_ENABLED

/* Events configuration constants - generated for all enabled component's events */



LDD_TDeviceData* WDog1_Init(LDD_TUserData *UserDataPtr);
/*
** ===================================================================
**     Method      :  WDog1_Init (component WatchDog_LDD)
**
**     Description :
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the
**         property <"Enable in init. code"> is set to "yes" value then
**         the device is also enabled (see the description of the
**         <Enable> method). In this case the <Enable> method is not
**         necessary and needn't to be generated. This method can be
**         called only once. Before the second call of Init the <Deinit>
**         must be called first.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     Returns     :
**         ---             - Pointer to the dynamically allocated
**                           private structure or NULL if there was an
**                           error.
** ===================================================================
*/

void WDog1_Deinit(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  WDog1_Deinit (component WatchDog_LDD)
**
**     Description :
**         De-initializes the device and frees the device data
**         structure memory.
**         Note: De-initialization on some devices is impossible.
**         Method Deinit does nothing in this case.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by Init method
**     Returns     : Nothing
** ===================================================================
*/

LDD_TError WDog1_Enable(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  WDog1_Enable (component WatchDog_LDD)
**
**     Description :
**         Enables the watchdog.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_PROTECT - Device is write protected and
**                           cannot be unlocked.
** ===================================================================
*/

LDD_TError WDog1_Disable(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  WDog1_Disable (component WatchDog_LDD)
**
**     Description :
**         Disables the watchdog.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_PROTECT - Device is write protected and
**                           cannot be unlocked.
** ===================================================================
*/

LDD_TError WDog1_Clear(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  WDog1_Clear (component WatchDog_LDD)
**
**     Description :
**         Clears the watchdog timer (it makes the timer restart from
**         zero).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_DISABLED - The component is disabled
** ===================================================================
*/

/* END WDog1. */

#endif
/* ifndef __WDog1_H */
/*
** ###################################################################
**
**     This file was created by Processor Expert 5.3 [05.01]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
