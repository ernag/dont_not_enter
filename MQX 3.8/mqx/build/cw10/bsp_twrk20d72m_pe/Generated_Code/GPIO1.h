/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : GPIO1.h
**     Project     : ProcessorExpert
**     Processor   : MK20DX256VLL7
**     Component   : GPIO_LDD
**     Version     : Component 01.123, Driver 01.04, CPU db: 3.00.000
**     Compiler    : CodeWarrior ARM C Compiler
**     Date/Time   : 2012-03-09, 20:24, # CodeGen: 0
**     Abstract    :
**         The HAL GPIO component will provide a low level API for unified
**         access to general purpose digital input/output pins across
**         various device designs.
**
**         RTOS drivers using HAL GPIO API will be simpler and more
**         portable to various microprocessors.
**     Settings    :
**          Component name                                 : GPIO1
**          Port                                           : PTC
**          Port width                                     : 32 bits
**          Mask of allocated pins                         : 600
**          Interrupt service/event                        : Disabled
**          Bit fields                                     : 2
**            Bit field                                    : 
**              Field name                                 : LED1
**              Pins                                       : 1
**                Pin                                      : 
**                  Pin                                    : ADC1_SE5b/CMP0_IN3/PTC9/I2S0_RX_BCLK/FBa_AD6/FTM2_FLT0
**                  Pin signal                             : LED_E1
**                  Initial pin direction                  : Output
**                    Initial output state                 : 1
**                  Initial pin event                      : Disabled
**                  Lock initialization function           : no
**            Bit field                                    : 
**              Field name                                 : LED2
**              Pins                                       : 1
**                Pin                                      : 
**                  Pin                                    : ADC1_SE6b/PTC10/I2C1_SCL/I2S0_RX_FS/FBa_AD5
**                  Pin signal                             : 
**                  Initial pin direction                  : Output
**                    Initial output state                 : 1
**                  Initial pin event                      : Disabled
**                  Lock initialization function           : no
**          Initialization                                 : 
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnPortEvent                                : Disabled
**     Contents    :
**         Init                    - LDD_TDeviceData* GPIO1_Init(LDD_TUserData *UserDataPtr);
**         Deinit                  - void GPIO1_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         SetPortEventCondition   - LDD_TError GPIO1_SetPortEventCondition(LDD_TDeviceData *DeviceDataPtr,...
**         GetPortEventStatus      - GPIO1_TPortValue GPIO1_GetPortEventStatus(LDD_TDeviceData *DeviceDataPtr);
**         SetPortValue            - void GPIO1_SetPortValue(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Value);
**         GetPortValue            - GPIO1_TPortValue GPIO1_GetPortValue(LDD_TDeviceData *DeviceDataPtr);
**         ClearPortBits           - void GPIO1_ClearPortBits(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask);
**         SetPortBits             - void GPIO1_SetPortBits(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask);
**         TogglePortBits          - void GPIO1_TogglePortBits(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue...
**         SetPortInputDirection   - void GPIO1_SetPortInputDirection(LDD_TDeviceData *DeviceDataPtr,...
**         SetPortOutputDirection  - void GPIO1_SetPortOutputDirection(LDD_TDeviceData *DeviceDataPtr,...
**         SetFieldValue           - void GPIO1_SetFieldValue(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField...
**         GetFieldValue           - GPIO1_TFieldValue GPIO1_GetFieldValue(LDD_TDeviceData *DeviceDataPtr,...
**         ClearFieldBits          - void GPIO1_ClearFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField...
**         SetFieldBits            - void GPIO1_SetFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField...
**         ToggleFieldBits         - void GPIO1_ToggleFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField...
**         SetFieldInputDirection  - void GPIO1_SetFieldInputDirection(LDD_TDeviceData *DeviceDataPtr,...
**         SetFieldOutputDirection - void GPIO1_SetFieldOutputDirection(LDD_TDeviceData *DeviceDataPtr,...
**         ConnectPin              - LDD_TError GPIO1_ConnectPin(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask...
**
**     Copyright : 1997 - 2012 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __GPIO1_H
#define __GPIO1_H

/* MODULE GPIO1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "IO_Map.h"
#include "GPIO_PDD.h"
#include "PORT_PDD.h"
#include "PE_LDD.h"

#include "Cpu.h"


/* Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define GPIO1_PRPH_BASE_ADDRESS  0x400FF080U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define GPIO1_Init_METHOD_ENABLED
#define GPIO1_Deinit_METHOD_ENABLED
#define GPIO1_SetPortEventCondition_METHOD_ENABLED
#define GPIO1_GetPortEventStatus_METHOD_ENABLED
#define GPIO1_SetPortValue_METHOD_ENABLED
#define GPIO1_GetPortValue_METHOD_ENABLED
#define GPIO1_ClearPortBits_METHOD_ENABLED
#define GPIO1_SetPortBits_METHOD_ENABLED
#define GPIO1_TogglePortBits_METHOD_ENABLED
#define GPIO1_SetPortInputDirection_METHOD_ENABLED
#define GPIO1_SetPortOutputDirection_METHOD_ENABLED
#define GPIO1_SetFieldValue_METHOD_ENABLED
#define GPIO1_GetFieldValue_METHOD_ENABLED
#define GPIO1_ClearFieldBits_METHOD_ENABLED
#define GPIO1_SetFieldBits_METHOD_ENABLED
#define GPIO1_ToggleFieldBits_METHOD_ENABLED
#define GPIO1_SetFieldInputDirection_METHOD_ENABLED
#define GPIO1_SetFieldOutputDirection_METHOD_ENABLED
#define GPIO1_ConnectPin_METHOD_ENABLED

/* Events configuration constants - generated for all enabled component's events */

/* Definition of bit field constants */
#define LED1 ((LDD_GPIO_TBitField)0)
#define LED2 ((LDD_GPIO_TBitField)1)

/* Definition of implementation constants */
#define GPIO1_ALLOCATED_PINS_MASK 0x0600U /* Mask of all allocated pins from the port */
#define GPIO1_MODULE_BASE_ADDRESS PTC_BASE_PTR /* Name of macro used as the base address */
#define GPIO1_PORTCONTROL_BASE_ADDRESS PORTC_BASE_PTR /* Name of macro used as the base address */
#define GPIO1_AVAILABLE_EVENTS_MASK 0x00U /* Mask of all available events */
#define GPIO1_FIELD_0_PIN_0 LDD_GPIO_PIN_9 /* Constant for the pin in the field used in the method ConnectPin */
#define GPIO1_FIELD_1_PIN_0 LDD_GPIO_PIN_10 /* Constant for the pin in the field used in the method ConnectPin */
#define GPIO1_LED1_START_BIT 9u        /* Index of the starting bit of the bit field (0 represents LSB) */
#define GPIO1_LED1_MASK 0x0200u        /* Mask of the bits allocated by the bit field (within the port) */
#define GPIO1_LED2_START_BIT 10u       /* Index of the starting bit of the bit field (0 represents LSB) */
#define GPIO1_LED2_MASK 0x0400u        /* Mask of the bits allocated by the bit field (within the port) */
/* Representation of unaligned data value of the port.
   Unsigned integer of proper width depending on the size of the GPIO port allocated.
   Typically the value of n-th bit represents the data for the n-th pin within the port.
   Such value is not abstracted from the physical position of the bits within the port. */
typedef uint32_t GPIO1_TPortValue;

/* Representation of right-aligned data value of the bit field.
   Typically the value of n-th bit represents the data of the n-th bit within the bit field (not within the port).
   There are used only so many lowest bits, as it is denoted by the width of the bit field.
   Such value is abstracted from the physical position of the bit field pins within the port.
   Equals to the type <compId>_TPortValue. */
typedef GPIO1_TPortValue GPIO1_TFieldValue;



LDD_TDeviceData* GPIO1_Init(LDD_TUserData *UserDataPtr);
/*
** ===================================================================
**     Method      :  GPIO1_Init (component GPIO_LDD)
**
**     Description :
**         This method initializes the associated peripheral(s) and the
**         component internal variables. The method is called
**         automatically as a part of the application initialization
**         code.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * UserDataPtr     - Pointer to the RTOS device
**                           structure. This pointer will be passed to
**                           all events as parameter.
**     Returns     :
**         ---             - Pointer to the dynamically allocated
**                           private structure or NULL if there was an
**                           error.
** ===================================================================
*/

void GPIO1_Deinit(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  GPIO1_Deinit (component GPIO_LDD)
**
**     Description :
**         This method disables the device and frees the device data
**         structure memory.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Pointer to device data
**                           structure pointer.
**     Returns     : Nothing
** ===================================================================
*/

LDD_TError GPIO1_SetPortEventCondition(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask, LDD_GPIO_TEventCondition Condition);
/*
** ===================================================================
**     Method      :  GPIO1_SetPortEventCondition (component GPIO_LDD)
**
**     Description :
**         This method defines condition of the <OnPortEvent> for
**         required pins of the port.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Mask            - Unaligned mask of bits to setting the
**                           event condition. Each port pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected pin, bit value 1 means
**                           selected pin. The bit 0 corresponds with
**                           the pin which has index 0 within the port,
**                           the bit 1 corresponds with the pin which
**                           has index 1 within the port, etc.
**         Condition       - Defines conditions when event
**                           is invoked. Possible values are: 
**                           LDD_GPIO_DISABLED - Event doesn't invoke. 
**                           LDD_GPIO_LOW - Event when logic zero.
**                           LDD_GPIO_HIGH - Event when logic one.
**                           LDD_GPIO_RISING - Event on rising edge.
**                           LDD_GPIO_FALLING - Event on falling edge.
**                           LDD_GPIO_BOTH - Event on rising and falling
**                           edge. 
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_PARAM_MASK - Invalid pin mask.
**                           ERR_PARAM_CONDITION - Invalid condition.
** ===================================================================
*/

GPIO1_TPortValue GPIO1_GetPortEventStatus(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  GPIO1_GetPortEventStatus (component GPIO_LDD)
**
**     Description :
**         Returns a set of asserted flags. The flags are accumulated
**         in the set. After calling this method the set is returned
**         and cleared.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Current status flags. Each port pin has
**                           corresponding bit in the mask. Bit value 0
**                           means condition didn't occur on
**                           corresponding pin, bit value 1 means
**                           condition occured on corresponding pin. The
**                           bit 0 corresponds with the pin which has
**                           index 0 within the port, the bit 1
**                           corresponds with the pin which has index 1
**                           within the port, etc.
** ===================================================================
*/

void GPIO1_SetPortValue(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Value);
/*
** ===================================================================
**     Method      :  GPIO1_SetPortValue (component GPIO_LDD)
**
**     Description :
**         This method writes the output data value to the port. Only
**         configured pins (through all of bit fields in this component)
**         are affected.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Value           - Unaligned data value to write to the
**                           port. The bit 0 corresponds with the pin
**                           which has index 0 within the port, the bit
**                           1 corresponds with the pin which has index
**                           1 within the port, etc. Only configured
**                           pins (through all of bit fields in this
**                           component) are affected.
**     Returns     : Nothing
** ===================================================================
*/

GPIO1_TPortValue GPIO1_GetPortValue(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  GPIO1_GetPortValue (component GPIO_LDD)
**
**     Description :
**         This method returns the current port input data value. Only
**         configured pins (through all of bit fields in this component)
**         are returned.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Unaligned current port input data value
**                           masked for allocated pins of the port. The
**                           bit 0 corresponds with the pin which has
**                           index 0 within the port, the bit 1
**                           corresponds with the pin which has index 1
**                           within the port, etc. Only configured pins
**                           (through all of bit fields in this
**                           component) are returned. The others are
**                           zeros.
** ===================================================================
*/

void GPIO1_ClearPortBits(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask);
/*
** ===================================================================
**     Method      :  GPIO1_ClearPortBits (component GPIO_LDD)
**
**     Description :
**         This method drives the specified bits of the port to the
**         inactive level. Only configured pins (through all of bit
**         fields in this component) are affected.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Mask            - Unaligned mask of bits to setting the
**                           inactive level. Each port pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the port,
**                           the bit 1 corresponds with the pin which
**                           has index 1 within the port, etc. Only
**                           configured pins (through all of bit fields
**                           in this component) are affected.
**     Returns     : Nothing
** ===================================================================
*/

void GPIO1_SetPortBits(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask);
/*
** ===================================================================
**     Method      :  GPIO1_SetPortBits (component GPIO_LDD)
**
**     Description :
**         This method drives the specified bits of the port to the
**         active level. Only configured pins (through all of bit
**         fields in this component) are affected.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Mask            - Unaligned mask of bits to setting the
**                           active level. Each port pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the port,
**                           the bit 1 corresponds with the pin which
**                           has index 1 within the port, etc. Only
**                           configured pins (through all of bit fields
**                           in this component) are affected.
**     Returns     : Nothing
** ===================================================================
*/

void GPIO1_TogglePortBits(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask);
/*
** ===================================================================
**     Method      :  GPIO1_TogglePortBits (component GPIO_LDD)
**
**     Description :
**         This method inverts the specified bits of the port to
**         another level. Only configured pins (through all of bit
**         fields in this component) are affected.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Mask            - Unaligned mask of bits to inverting the
**                           current level. Each port pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the port,
**                           the bit 1 corresponds with the pin which
**                           has index 1 within the port, etc. Only
**                           configured pins (through all of bit fields
**                           in this component) are affected.
**     Returns     : Nothing
** ===================================================================
*/

void GPIO1_SetPortInputDirection(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask);
/*
** ===================================================================
**     Method      :  GPIO1_SetPortInputDirection (component GPIO_LDD)
**
**     Description :
**         This method sets the specified pins of the port to the input
**         direction. Only configured pins (through all of bit fields
**         in this component) are affected.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Mask            - Mask of bits to setting the input
**                           direction. Each port pin has corresponding
**                           bit in the mask. Bit value 0 means not
**                           selected bit, bit value 1 means selected
**                           bit. The bit 0 corresponds with the pin
**                           which has index 0 within the port, the bit
**                           1 corresponds with the pin which has index
**                           1 within the port, etc. Only configured
**                           pins (through all of bit fields in this
**                           component) are affected.
**     Returns     : Nothing
** ===================================================================
*/

void GPIO1_SetPortOutputDirection(LDD_TDeviceData *DeviceDataPtr, GPIO1_TPortValue Mask, GPIO1_TPortValue Value);
/*
** ===================================================================
**     Method      :  GPIO1_SetPortOutputDirection (component GPIO_LDD)
**
**     Description :
**         This method sets the specified pins of the port to the
**         output direction. The specified pins of the port will be
**         driven to specified states. Only configured pins (through
**         all of bit fields in this component) are affected.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Mask            - Mask of bits to setting the output
**                           direction. Each port pin has corresponding
**                           bit in the mask. Bit value 0 means not
**                           selected bit, bit value 1 means selected
**                           bit. The bit 0 corresponds with the pin
**                           which has index 0 within the port, the bit
**                           1 corresponds with the pin which has index
**                           1 within the port, etc. Only configured
**                           pins (through all of bit fields in this
**                           component) are affected.
**         Value           - Unaligned port data value to appear on
**                           the specified port pins after they have
**                           been switched to the output direction.
**     Returns     : Nothing
** ===================================================================
*/

void GPIO1_SetFieldValue(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO1_TFieldValue Value);
/*
** ===================================================================
**     Method      :  GPIO1_SetFieldValue (component GPIO_LDD)
**
**     Description :
**         This method sets the output data value of the specified bit
**         field.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Field           - Bit field to write. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**         Value           - Aligned data value to writting to the
**                           specified bit field. The bit 0 corresponds
**                           with the pin which has index 0 within the
**                           given bit field, the bit 1 corresponds with
**                           the pin which has index 1 within the given
**                           bit field, etc.
**     Returns     : Nothing
** ===================================================================
*/

GPIO1_TFieldValue GPIO1_GetFieldValue(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field);
/*
** ===================================================================
**     Method      :  GPIO1_GetFieldValue (component GPIO_LDD)
**
**     Description :
**         This method returns the current input data of the specified
**         field.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Field           - Bit field to reading. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**     Returns     :
**         ---             - Aligned current port input value masked
**                           for allocated pins of the field. The bit 0
**                           corresponds with the pin which has index 0
**                           within the given bit field, the bit 1
**                           corresponds with the pin which has index 1
**                           within the given bit field, etc.
** ===================================================================
*/

void GPIO1_ClearFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO1_TFieldValue Mask);
/*
** ===================================================================
**     Method      :  GPIO1_ClearFieldBits (component GPIO_LDD)
**
**     Description :
**         This method drives the specified bits of the specified bit
**         field to the inactive level.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Field           - Bit field to write. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**         Mask            - Aligned mask of bits to setting the
**                           inactive level. Each field pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the given
**                           bit field, the bit 1 corresponds with the
**                           pin which has index 1 within the given bit
**                           field, etc.
**     Returns     : Nothing
** ===================================================================
*/

void GPIO1_SetFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO1_TFieldValue Mask);
/*
** ===================================================================
**     Method      :  GPIO1_SetFieldBits (component GPIO_LDD)
**
**     Description :
**         This method drives the specified bits of the specified bit
**         field to the active level.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Field           - Bit field to write. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**         Mask            - Aligned mask of bits to setting the
**                           active level. Each field pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the given
**                           bit field, the bit 1 corresponds with the
**                           pin which has index 1 within the given bit
**                           field, etc.
**     Returns     : Nothing
** ===================================================================
*/

void GPIO1_ToggleFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO1_TFieldValue Mask);
/*
** ===================================================================
**     Method      :  GPIO1_ToggleFieldBits (component GPIO_LDD)
**
**     Description :
**         This method inverts the specified bits of the specified bit
**         field to other level.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Field           - Bit field to write. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**         Mask            - Aligned mask of bits to inverting the
**                           current level. Each field pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the given
**                           bit field, the bit 1 corresponds with the
**                           pin which has index 1 within the given bit
**                           field, etc.
**     Returns     : Nothing
** ===================================================================
*/

void GPIO1_SetFieldInputDirection(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field);
/*
** ===================================================================
**     Method      :  GPIO1_SetFieldInputDirection (component GPIO_LDD)
**
**     Description :
**         This method sets all pins of the field to the input
**         direction.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Field           - Bit field to write. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**     Returns     : Nothing
** ===================================================================
*/

void GPIO1_SetFieldOutputDirection(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPIO1_TFieldValue Value);
/*
** ===================================================================
**     Method      :  GPIO1_SetFieldOutputDirection (component GPIO_LDD)
**
**     Description :
**         This method sets all pins of the field to the output
**         direction.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Field           - Bit field to set to the output
**                           direction. Bit fields are defined during
**                           design time and for each bit field there is
**                           a generated constant.
**         Value           - Aligned data value to appear on the
**                           bit field pins after they have been
**                           switched to the output direction.
**     Returns     : Nothing
** ===================================================================
*/

LDD_TError GPIO1_ConnectPin(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask);
/*
** ===================================================================
**     Method      :  GPIO1_ConnectPin (component GPIO_LDD)
**
**     Description :
**         This method reconnects the requested pin associated with the
**         selected peripheral in this component. This method is only
**         available for CPU derivatives and peripherals that support
**         the runtime pin sharing with other internal on-chip
**         peripherals.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         PinMask         - Mask for the requested pins. The
**                           peripheral pins are reconnected according
**                           to this mask.
**     Returns     :
**         ---             - Error code, possible values:
**                           ERR_OK - OK
**                           ERR_PARAM_MASK - Invalid pin mask
** ===================================================================
*/

/* END GPIO1. */

#endif
/* ifndef __GPIO1_H */
/*
** ###################################################################
**
**     This file was created by Processor Expert 5.3 [05.01]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
