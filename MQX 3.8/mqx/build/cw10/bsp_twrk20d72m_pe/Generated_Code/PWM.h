/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : PWM.h
**     Project     : ProcessorExpert
**     Processor   : MK20DX256VLL7
**     Component   : TimerUnit_LDD
**     Version     : Component 01.123, Driver 01.06, CPU db: 3.00.000
**     Compiler    : CodeWarrior ARM C Compiler
**     Date/Time   : 2012-03-09, 20:24, # CodeGen: 0
**     Abstract    :
**          This TimerUnit component provides a low level API for unified hardware access across
**          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
**     Settings    :
**          Component name                                 : PWM
**          Module name                                    : FTM0
**          Counter                                        : FTM0_CNT
**          Counter direction                              : Up
**          Counter width                                  : 16 bits
**          Value type                                     : uint16_t
**          Input clock source                             : Internal
**            Counter frequency                            : 36 MHz
**          Counter restart                                : On-match
**            Period device                                : FTM0_MOD
**            Period                                       : 4096 timer-ticks
**            Interrupt                                    : Enabled
**              Interrupt                                  : INT_FTM0
**              Interrupt priority                         : medium priority
**          Channel list                                   : 1
**            Channel 0                                    : 
**              Mode                                       : Compare
**                Compare                                  : FTM0_C0V
**                Offset                                   : 1 timer-ticks
**                Output on compare                        : Set
**                  Output on overrun                      : Clear
**                  Initial state                          : Low
**                  Output pin                             : ADC0_SE15/TSI0_CH14/PTC1/LLWU_P6/SPI0_PCS3/UART1_RTS_b/FTM0_CH0/FBa_AD13/I2S0_TXD0
**                  Output pin signal                      : 
**                Interrupt                                : Disabled
**          Initialization                                 : 
**            Enabled in init. code                        : no
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnCounterRestart                           : Enabled
**              OnChannel0                                 : Disabled
**              OnChannel1                                 : Disabled
**              OnChannel2                                 : Disabled
**              OnChannel3                                 : Disabled
**              OnChannel4                                 : Disabled
**              OnChannel5                                 : Disabled
**              OnChannel6                                 : Disabled
**              OnChannel7                                 : Disabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**     Contents    :
**         Init                  - LDD_TDeviceData* PWM_Init(LDD_TUserData *UserDataPtr);
**         Deinit                - void PWM_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         Enable                - LDD_TError PWM_Enable(LDD_TDeviceData *DeviceDataPtr);
**         Disable               - LDD_TError PWM_Disable(LDD_TDeviceData *DeviceDataPtr);
**         SetEventMask          - LDD_TError PWM_SetEventMask(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask...
**         GetEventMask          - LDD_TEventMask PWM_GetEventMask(LDD_TDeviceData *DeviceDataPtr);
**         GetEventStatus        - LDD_TEventMask PWM_GetEventStatus(LDD_TDeviceData *DeviceDataPtr);
**         GetInputFrequencyReal - LDD_TimerUnit_Tfloat PWM_GetInputFrequencyReal(LDD_TDeviceData *DeviceDataPtr);
**         GetInputFrequency     - uint32_t PWM_GetInputFrequency(LDD_TDeviceData *DeviceDataPtr);
**         SetPeriodTicks        - LDD_TError PWM_SetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, PWM_TValueType...
**         GetPeriodTicks        - LDD_TError PWM_GetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, PWM_TValueType...
**         ResetCounter          - LDD_TError PWM_ResetCounter(LDD_TDeviceData *DeviceDataPtr);
**         GetCounterValue       - PWM_TValueType PWM_GetCounterValue(LDD_TDeviceData *DeviceDataPtr);
**         SetOffsetTicks        - LDD_TError PWM_SetOffsetTicks(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**         GetOffsetTicks        - LDD_TError PWM_GetOffsetTicks(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**         GetCaptureValue       - LDD_TError PWM_GetCaptureValue(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**         SelectOutputAction    - LDD_TError PWM_SelectOutputAction(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**         SelectCaptureEdge     - LDD_TError PWM_SelectCaptureEdge(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**         GetDriverState        - LDD_TDriverState PWM_GetDriverState(LDD_TDeviceData *DeviceDataPtr);
**
**     Copyright : 1997 - 2012 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __PWM_H
#define __PWM_H

/* MODULE PWM. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "PE_LDD.h"
#include "FTM_PDD.h"
#include "Cpu.h"


#ifndef __BWUserType_PWM_TValueType
#define __BWUserType_PWM_TValueType
  typedef uint16_t PWM_TValueType ;    /* Type for data parameters of methods */
#endif
#define PWM_CNT_INP_FREQ_U_0 0x02255100UL /* Counter input frequency in Hz */
#define PWM_CNT_INP_FREQ_U_0_CFG_0 0x02255100UL /* Counter input frequency in Hz for Clock configuration 0 */
#define PWM_CNT_INP_FREQ_R_0 35999712.00230398F /* Counter input frequency in Hz */
#define PWM_CNT_INP_FREQ_R_0_CFG_0 35999712.00230398F /* Counter input frequency in Hz for Clock configuration 0 */
#define PWM_CNT_INP_FREQ_COUNT 0U      /* Count of predefined counter input frequencies */
#define PWM_PERIOD_TICKS   0x1000UL    /* Initialization value of period in 'counter ticks' */
#define PWM_NUMBER_OF_CHANNELS 0x01U   /* Count of predefined channels */
#define PWM_COUNTER_WIDTH  0x10U       /* Counter width in bits  */
#define PWM_COUNTER_DIR    DIR_UP      /* Direction of counting */
#define PWM_OFFSET_0_TICKS 0x01ul      /* Initialization value of offset as 'counter ticks' for channel 0 */
/* Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define PWM_PRPH_BASE_ADDRESS  0x40038000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define PWM_Init_METHOD_ENABLED
#define PWM_Deinit_METHOD_ENABLED
#define PWM_Enable_METHOD_ENABLED
#define PWM_Disable_METHOD_ENABLED
#define PWM_SetEventMask_METHOD_ENABLED
#define PWM_GetEventMask_METHOD_ENABLED
#define PWM_GetEventStatus_METHOD_ENABLED
#define PWM_GetInputFrequencyReal_METHOD_ENABLED
#define PWM_GetInputFrequency_METHOD_ENABLED
#define PWM_SetPeriodTicks_METHOD_ENABLED
#define PWM_GetPeriodTicks_METHOD_ENABLED
#define PWM_ResetCounter_METHOD_ENABLED
#define PWM_GetCounterValue_METHOD_ENABLED
#define PWM_SetOffsetTicks_METHOD_ENABLED
#define PWM_GetOffsetTicks_METHOD_ENABLED
#define PWM_GetCaptureValue_METHOD_ENABLED
#define PWM_SelectOutputAction_METHOD_ENABLED
#define PWM_SelectCaptureEdge_METHOD_ENABLED
#define PWM_GetDriverState_METHOD_ENABLED

/* Events configuration constants - generated for all enabled component's events */
#define PWM_OnCounterRestart_EVENT_ENABLED



LDD_TDeviceData* PWM_Init(LDD_TUserData *UserDataPtr);
/*
** ===================================================================
**     Method      :  PWM_Init (component TimerUnit_LDD)
**
**     Description :
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the
**         property <"Enable in init. code"> is set to "yes" value then
**         the device is also enabled (see the description of the
**         <Enable> method). In this case the <Enable> method is not
**         necessary and needn't to be generated. This method can be
**         called only once. Before the second call of Init the <Deinit>
**         must be called first.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     Returns     :
**         ---             - Pointer to the dynamically allocated
**                           private structure or NULL if there was an
**                           error.
** ===================================================================
*/

void PWM_Deinit(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  PWM_Deinit (component TimerUnit_LDD)
**
**     Description :
**         Deinitializes the device. Switches off the device, frees the
**         device data structure memory, interrupts vectors, etc.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by Init method
**     Returns     : Nothing
** ===================================================================
*/

LDD_TError PWM_Enable(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  PWM_Enable (component TimerUnit_LDD)
**
**     Description :
**         Enables the component - it starts the signal generation.
**         Events may be generated (see SetEventMask). The method is
**         not available if the counter can't be disabled/enabled by HW.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/

LDD_TError PWM_Disable(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  PWM_Disable (component TimerUnit_LDD)
**
**     Description :
**         Disables the component - it stops signal generation and
**         events calling. The method is not available if the counter
**         can't be disabled/enabled by HW.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/

LDD_TError PWM_SetEventMask(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask);
/*
** ===================================================================
**     Method      :  PWM_SetEventMask (component TimerUnit_LDD)
**
**     Description :
**         Enables/disables event(s). The events contained within the
**         mask are enabled. Events not contained within the mask are
**         disabled. The component event masks are defined in the
**         PE_LDD.h file. Note: Event that are not generated (See the
**         "Events" tab in the Component inspector) are not handled by
**         this method. In this case the method returns ERR_PARAM_MASK
**         error code. See also method <GetEventMask>.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         EventMask       - Event mask
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_PARAM_MASK - Event mask is not valid
** ===================================================================
*/

LDD_TEventMask PWM_GetEventMask(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  PWM_GetEventMask (component TimerUnit_LDD)
**
**     Description :
**         Returns current events mask. Note: Event that are not
**         generated (See the "Events" tab in the Component inspector)
**         are not handled by this method. See also method
**         <SetEventMask>.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by Init method.
**     Returns     :
**         ---             - Current EventMask.
**                           The component event masks are defined in
**                           the PE_LDD.h file.
** ===================================================================
*/

LDD_TEventMask PWM_GetEventStatus(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  PWM_GetEventStatus (component TimerUnit_LDD)
**
**     Description :
**         Returns current pending flags and clears them.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by Init method.
**     Returns     :
**         ---             - Current status flags
** ===================================================================
*/

LDD_TimerUnit_Tfloat PWM_GetInputFrequencyReal(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  PWM_GetInputFrequencyReal (component TimerUnit_LDD)
**
**     Description :
**         Returns current input frequency of the counter in Hz as
**         float number. This method can be used only if <"Input clock
**         source"> property is set to "internal".
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by Init method.
**     Returns     :
**         ---             - Input frequency
** ===================================================================
*/

uint32_t PWM_GetInputFrequency(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  PWM_GetInputFrequency (component TimerUnit_LDD)
**
**     Description :
**         Returns current input frequency of the counter in Hz as
**         32-bit unsigned integer number. This method can be used only
**         if <"Input clock source"> property is set to "internal".
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by Init method.
**     Returns     :
**         ---             - Input frequency
** ===================================================================
*/

LDD_TError PWM_SetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, PWM_TValueType Ticks);
/*
** ===================================================================
**     Method      :  PWM_SetPeriodTicks (component TimerUnit_LDD)
**
**     Description :
**         The method sets timer re-initialization period (in timer
**         ticks). This method is available only if the property
**         <"Counter restart"> is switched to 'on-match' value.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Ticks           - Number of counter ticks before counter
**                           re-initialization. Value 0 means maximal
**                           period value the same as "free-running
**                           mode", e.g. counter overflow or underflow
**                           without any explicit re-initialization.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK 
**                           ERR_PARAM_TICKS - Ticks parameter is out of
**                           possible range.
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/

LDD_TError PWM_GetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, PWM_TValueType *TicksPtr);
/*
** ===================================================================
**     Method      :  PWM_GetPeriodTicks (component TimerUnit_LDD)
**
**     Description :
**         Returns the number of counter ticks before re-initialization.
**         See also method <SetPeriodTicks>. This function is available
**         only if the property <"Counter restart"> is switched to
**         'on-match' value.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * TicksPtr        - Pointer to return value of the
**                           number of counter ticks before
**                           re-initialization
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK 
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/

LDD_TError PWM_ResetCounter(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  PWM_ResetCounter (component TimerUnit_LDD)
**
**     Description :
**         Resets counter. If counter is counting up then it is set to
**         zero. If counter is counting down then counter is updated to
**         the reload value.
**         The method is not available if HW doesn't allow resetting of
**         the counter.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK 
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/

PWM_TValueType PWM_GetCounterValue(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  PWM_GetCounterValue (component TimerUnit_LDD)
**
**     Description :
**         Returns the content of counter register. This method can be
**         used both if counter is enabled and if counter is disabled.
**         The method is not available if HW doesn't allow reading of
**         the counter.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by Init method.
**     Returns     :
**         ---             - Counter value (number of counted ticks).
** ===================================================================
*/

LDD_TError PWM_SetOffsetTicks(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, PWM_TValueType Ticks);
/*
** ===================================================================
**     Method      :  PWM_SetOffsetTicks (component TimerUnit_LDD)
**
**     Description :
**         Sets the new offset value to channel specified by the
**         parameter ChannelIdx. It is user responsibility to use value
**         below selected period. This method is available when at
**         least one channel is configured.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         ChannelIdx      - Index of the component
**                           channel.
**         Ticks           - Number of counter ticks to compare
**                           match.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK 
**                           ERR_PARAM_INDEX - ChannelIdx parameter is
**                           out of possible range.
**                           ERR_NOTAVAIL -  The compare mode is not
**                           selected for selected channel
**                           ERR_PARAM_TICKS - Ticks parameter is out of
**                           possible range.
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/

LDD_TError PWM_GetOffsetTicks(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, PWM_TValueType *TicksPtr);
/*
** ===================================================================
**     Method      :  PWM_GetOffsetTicks (component TimerUnit_LDD)
**
**     Description :
**         Returns the number of counter ticks to compare match channel
**         specified by the parameter ChannelIdx. See also method
**         <SetOffsetTicks>. This method is available when at least one
**         channel is configured.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         ChannelIdx      - Index of the component
**                           channel.
**       * TicksPtr        - Pointer to return value of the
**                           number of counter ticks to compare match.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK 
**                           ERR_PARAM_INDEX - ChannelIdx parameter is
**                           out of possible range.
**                           ERR_NOTAVAIL -  The compare mode is not
**                           selected for selected channel.
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/

LDD_TError PWM_GetCaptureValue(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, PWM_TValueType *ValuePtr);
/*
** ===================================================================
**     Method      :  PWM_GetCaptureValue (component TimerUnit_LDD)
**
**     Description :
**         Returns the content of capture register specified by the
**         parameter ChannelIdx. This method is available when at least
**         one channel is configured.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         ChannelIdx      - Index of the component
**                           channel.
**       * ValuePtr        - Pointer to return value of the
**                           capture register.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK 
**                           ERR_PARAM_INDEX - ChannelIdx parameter is
**                           out of possible range
**                           ERR_NOTAVAIL -  The capture mode is not
**                           selected for selected channel.
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/

LDD_TError PWM_SelectOutputAction(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, LDD_TimerUnit_TOutAction CompareAction, LDD_TimerUnit_TOutAction CounterAction);
/*
** ===================================================================
**     Method      :  PWM_SelectOutputAction (component TimerUnit_LDD)
**
**     Description :
**         Sets the type of compare match and counter overflow action
**         on channel output. This method is available when at least
**         one channel is configured.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         ChannelIdx      - Index of the component
**                           channel.
**         CompareAction   - Select output action
**                           on compare match
**         CounterAction   - Select output action
**                           on counter overflow
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_PARAM_INDEX - ChannelIdx parameter is
**                           out of possible range
**                           ERR_NOTAVAIL -  Action is not possible on
**                           selected channel or counter. Supported
**                           combinations are HW specific.
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/

LDD_TError PWM_SelectCaptureEdge(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, LDD_TimerUnit_TEdge Edge);
/*
** ===================================================================
**     Method      :  PWM_SelectCaptureEdge (component TimerUnit_LDD)
**
**     Description :
**         Sets the type of edge for input capture on selected channel
**         input. This method is available when at least one channel is
**         configured.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         ChannelIdx      - Index of the component
**                           channel.
**         Edge            - Select type of edge for input capture
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_PARAM_INDEX - ChannelIdx parameter is
**                           out of possible range
**                           ERR_NOTAVAIL -  Action is not possible on
**                           selected channel..
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/

void PWM_SetClockConfiguration(LDD_TDeviceData *DeviceDataPtr, LDD_TClockConfiguration ClockConfiguration);
/*
** ===================================================================
**     Method      :  PWM_SetClockConfiguration (component TimerUnit_LDD)
**
**     Description :
**         This method changes the clock configuration. During a clock 
**         configuration change the component changes it's setting 
**         immediately upon a request.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

LDD_TDriverState PWM_GetDriverState(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  PWM_GetDriverState (component TimerUnit_LDD)
**
**     Description :
**         This method returns the current driver status.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - The current driver status mask.
**                           Following status masks defined in PE_LDD.h
**                           can be used to check the current driver
**                           status.
**                           PE_LDD_DRIVER_DISABLED_IN_CLOCK_CONFIGURATION - 1 -
**                           Driver is disabled in the current mode; 0 -
**                           Driver is enabled in the current mode.  
**                           PE_LDD_DRIVER_DISABLED_BY_USER - 1 - Driver
**                           is disabled by the user; 0 - Driver is
**                           enabled by the user.        
**                           PE_LDD_DRIVER_BUSY - 1 - Driver is the BUSY
**                           state; 0 - Driver is in the IDLE state.
** ===================================================================
*/

/* {MQX RTOS Adapter} ISR function prototype */
void PWM_Interrupt(LDD_RTOS_TISRParameter _isrParameter);
/*
** ===================================================================
**     Method      :  PWM_Interrupt (component TimerUnit_LDD)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END PWM. */

#endif
/* ifndef __PWM_H */
/*
** ###################################################################
**
**     This file was created by Processor Expert 5.3 [05.01]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
