=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "MQX1"      (component MQX)

Module "GPIO1"     (component GPIO_LDD)
   - GPIO1_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - GPIO1_Deinit -This method disables the device and frees the device data structure memory.
   - GPIO1_SetFieldValue -This method sets the output data value of the specified bit field.
   - GPIO1_GetFieldValue -This method returns the current input data of the specified field.
   - GPIO1_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - GPIO1_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - GPIO1_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.
   - GPIO1_SetFieldInputDirection -This method sets all pins of the field to the input direction.
   - GPIO1_SetFieldOutputDirection -This method sets all pins of the field to the output direction.
   - GPIO1_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this component. This 
                method is only available for CPU derivatives and peripherals that support the runtime pin sharing with other 
                internal on-chip peripherals.

Module "TRG"       (component TimerUnit_LDD)
   - TRG_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TRG_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors, 
                etc.
   - TRG_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TRG_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TRG_SetEventMask -Enables/disables event(s). The events contained within the mask are enabled. Events not contained within 
                the mask are disabled. The component event masks are defined in the PE_LDD.h file. Note: Event that are not 
                generated (See the "Events" tab in the Component inspector) are not handled by this method. In this case the 
                method returns ERR_PARAM_MASK error code. See also method <GetEventMask>.
   - TRG_GetEventMask -Returns current events mask. Note: Event that are not generated (See the "Events" tab in the Component 
                inspector) are not handled by this method. See also method <SetEventMask>.
   - TRG_GetEventStatus -Returns current pending flags and clears them.
   - TRG_GetInputFrequencyReal -Returns current input frequency of the counter in Hz as float number. This method can be used 
                only if <"Input clock source"> property is set to "internal".
   - TRG_GetInputFrequency -Returns current input frequency of the counter in Hz as 32-bit unsigned integer number. This method 
                can be used only if <"Input clock source"> property is set to "internal".
   - TRG_SetPeriodTicks -The method sets timer re-initialization period (in timer ticks). This method is available only if the 
                property <"Counter restart"> is switched to 'on-match' value.
   - TRG_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - TRG_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - TRG_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TRG_SetOperationMode -This method requests to change the component's operation mode. Upon a request to change the 
                operation mode, the component will finish a pending job first and then notify a caller that an operation mode 
                has been changed. When no job is pending (ERR_OK), the component changes an operation mode immediately and 
                notify a caller about this change.
   - TRG_GetDriverState -This method returns the current driver status.

Module "DA1"       (component DAC_LDD)
   - DA1_Init -Initializes the device according to design-time configuration properties. Allocates memory for the device data 
                structure.   If the <Enable in init. code> is set to "yes" then the device is also enabled (see the description 
                of the Enable method).  This method can be called only once. Before the second call of Init the Deinit method 
                must be called first. If DMA service is enabled this method also initializes inherited DMA Transfer component.
   - DA1_Deinit -Disables the device and frees the device data structure memory. If DMA service is enabled this method also 
                deinitializes inherited DMA Transfer component.
   - DA1_Enable -Enables DAC device. If possible, this method switches on digital-to-analog converter device, voltage reference,
                etc.  This method is intended to be used together with Disable method to temporary switch On/Off the device 
                after the device is initialized.  This method is required if the <Enable in init. code> property is set to "no" 
                value.
   - DA1_Disable -Disables the DAC device. If possible, this method switches off digital-to-analog converter device, voltage 
                reference, etc. When the device is disabled, some component methods should not be called. If so, error 
                ERR_DISABLED is reported.  This method is intended to be used together with Enable method to temporary switch 
                On/Off the device after the device is initialized.  This method is not required. The Deinit method can be used 
                to switch off and uninstall the device.
   - DA1_SetEventMask -Enables/disables event(s). This method is available if the <Interrupt service/event> property is enabled 
                and at least one event is enabled. Pair method to GetEventMask. If DMA service is enabled this method is 
                maintaining DMA Transfer events.
   - DA1_GetEventMask -Returns current events mask. This method is available if the <Interrupt service/event> property is 
                enabled and at least one event is enabled. Pair method to SetEventMask. If DMA service is enabled this method 
                is maintaining DMA Transfer events.
   - DA1_SetBuffer -Writes an array of data words to the data buffer registers. Array is defined by pointer to start address 
                and by it's length. First written data buffer register is defined by index.  If the length of array exceeds 
                number of registers between the first written register and the last one at the end of the buffer then an 
                ERR_PARAM_RANGE is returned and no data are written. It is possible to write all register available in hardware 
                - no checking for current upper limit value of buffer is done.  DataArrayPtr has fixed data type regardless of 
                current hardware or design time configuration and must be always used. Real type of user data is specified in 
                <Data mode> property.  If the DMA service is enabled then this methods can be used to prepare DMA transfer via 
                channel handled by DMA Transfer inherited component.   _/Note: This method is available only if DAC device is 
                supporting data buffer and Data buffer is enabled./_
   - DA1_ForceSwTrigger -Triggers data buffer read pointer if software trigger is selected.  _/Note: This method is available 
                only if DAC device is supporting data buffer and Data buffer is enabled with Hardware trigger disabled./_
   - DA1_SetBufferMode -Selects buffer work mode.   _/Note: This method is available only if DAC device is supporting data 
                buffer and Data buffer is enabled./_
   - DA1_SetBufferSize -Sets data buffer size. If requested buffer size exceeds hardware capacity then ERR_PARAM_SIZE is 
                returned.  _/Note: This method is available only if DAC device is supporting data buffer and Data buffer is 
                enabled./_
   - DA1_SetBufferWatermark -Selects watermark words number. If requested watermark value is not available then ERR_PARAM_VALUE 
                is returned.  _/Note: This method is available only if DAC device is supporting data buffer and Data buffer is 
                enabled./_
   - DA1_SetBufferReadPointer -Sets the data buffer read pointer value. If requested pointer value is greater than buffer size 
                defined by buffer upper limit value then ERR_PARAM_VALUE is returned.  _/Note: This method is available only if 
                DAC device is supporting data buffer and Data buffer is enabled./_
   - DA1_GetBufferReadPointer -Returns the data buffer read pointer value.  _/Note: This method is available only if DAC device 
                is supporting data buffer and Data buffer is enabled./_

Module "WDog1"     (component WatchDog_LDD)
   - WDog1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - WDog1_Deinit -De-initializes the device and frees the device data structure memory.   Note: De-initialization on some 
                devices is impossible. Method Deinit does nothing in this case.
   - WDog1_Enable -Enables the watchdog.
   - WDog1_Disable -Disables the watchdog.
   - WDog1_Clear -Clears the watchdog timer (it makes the timer restart from zero).

Module "PWM"       (component TimerUnit_LDD)
   - PWM_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - PWM_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors, 
                etc.
   - PWM_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - PWM_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - PWM_SetEventMask -Enables/disables event(s). The events contained within the mask are enabled. Events not contained within 
                the mask are disabled. The component event masks are defined in the PE_LDD.h file. Note: Event that are not 
                generated (See the "Events" tab in the Component inspector) are not handled by this method. In this case the 
                method returns ERR_PARAM_MASK error code. See also method <GetEventMask>.
   - PWM_GetEventMask -Returns current events mask. Note: Event that are not generated (See the "Events" tab in the Component 
                inspector) are not handled by this method. See also method <SetEventMask>.
   - PWM_GetEventStatus -Returns current pending flags and clears them.
   - PWM_GetInputFrequencyReal -Returns current input frequency of the counter in Hz as float number. This method can be used 
                only if <"Input clock source"> property is set to "internal".
   - PWM_GetInputFrequency -Returns current input frequency of the counter in Hz as 32-bit unsigned integer number. This method 
                can be used only if <"Input clock source"> property is set to "internal".
   - PWM_SetPeriodTicks -The method sets timer re-initialization period (in timer ticks). This method is available only if the 
                property <"Counter restart"> is switched to 'on-match' value.
   - PWM_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - PWM_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - PWM_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - PWM_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - PWM_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.
   - PWM_GetCaptureValue -Returns the content of capture register specified by the parameter ChannelIdx. This method is 
                available when at least one channel is configured.
   - PWM_SelectOutputAction -Sets the type of compare match and counter overflow action on channel output. This method is 
                available when at least one channel is configured.
   - PWM_SelectCaptureEdge -Sets the type of edge for input capture on selected channel input. This method is available when at 
                least one channel is configured.
   - PWM_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this component. This 
                method is available only for CPU derivatives and peripherals that support runtime pin sharing with other 
                internal on-chip peripherals.
   - PWM_SetOperationMode -This method requests to change the component's operation mode. Upon a request to change the 
                operation mode, the component will finish a pending job first and then notify a caller that an operation mode 
                has been changed. When no job is pending (ERR_OK), the component changes an operation mode immediately and 
                notify a caller about this change.
   - PWM_GetDriverState -This method returns the current driver status.

Module "Cpu"       (component MK60DN512MD10)
   - Cpu_SetClockConfiguration -Calling of this method will cause the clock configuration change and reconfiguration of all 
                components according to the requested clock configuration setting.
   - Cpu_GetClockConfiguration -Returns the active clock configuration identifier. The method is enabled only if more than one 
                clock configuration is enabled in the component.
   - Cpu_SetOperationMode -This method requests to change the component's operation mode (RUN, WAIT, SLEEP, STOP). The target 
                operation mode will be entered immediately.   See <Operation mode settings> for further details of the 
                operation modes mapping to low power modes of the cpu.
   - Cpu_EnableInt -Enables all maskable interrupts.
   - Cpu_DisableInt -Disables all maskable interrupts.
   - Cpu_GetLLSWakeUpFlags -This method returns the current status of the LLWU wake-up flags indicating which wake-up source 
                caused the MCU to exit LLS or VLLSx low power mode.   The following predefined constants can be used to 
                determine the wake-up source:   LLWU_EXT_PIN0, ... LLWU_EXT_PIN15 - external pin 0 .. 15 caused the wake-up   
                LLWU_INT_MODULE0 .. LLWU_INT_MODULE7 - internal module 0..15 caused the wake-up.
   - Cpu_MCGAutoTrim -This method uses MCG auto trim feature to trim internal reference clock. This method can be used only in 
                a clock configuration which derives its bus clock from external reference clock (<MCG mode> must be one of the 
                following modes - FEE, FBE, BLPE, PEE, PBE) and if value of <Bus clock> is in the range <8; 16>MHz.  The slow 
                internal reference clock is trimmed to the value selected by <Slow internal reference clock [kHz]> property.   
                The fast internal reference clock will be trimmed to value 4MHz.

===================================================================================
