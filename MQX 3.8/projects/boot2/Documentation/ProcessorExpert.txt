=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "USB_OTG1"  (component Init_USB_OTG_VAR0)
   - USB_OTG1_Init -This method initializes registers of the USB_OTG module according to the Peripheral Initialization settings.
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "FLASH1"    (component FLASH_LDD)
   - FLASH1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" property is set to "yes" 
                (<Enabled in init. code>) value then the device is also enabled(see the description of the Enable() method). In 
                this case the Enable() method is not necessary and needn't to be generated. This method can be called only once.
                Before the second call of Init() the Deinit() must be called first.
   - FLASH1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - FLASH1_Read -This method sets up a flash memory read operation. The operation itself is performing by defined batches 
                (property <Read batch size>) by periodical calling the component’s Main method in the user application (higher 
                level OS service).
   - FLASH1_Write -This method sets up a flash memory write operation. The operation itself is performing by defined batches 
                (tproperty <Write batch size>) by periodical calling the component’s Main method in the user application 
                (higher level OS service) or by the component’s ISR, if an component’s interrupt service is enabled.
   - FLASH1_Erase -This method sets up a flash memory erase operation. The operation itself is performing by defined batches 
                (property <Erase batch size>) by periodical calling the component’s Main method in the user application (higher 
                level OS service) or by the component’s ISR, if an component’s interrupt service is enabled.
   - FLASH1_GetOperationStatus -Returns a status of current (last) flash memory operation.
   - FLASH1_Main -This method is used to perform one batch of a flash memory operation operation. This method is used to 
                perform batches of all flash memory operations (Write, Read, Erase, EraseBlock, VerifyErasedBlock) when the 
                component works in the polled mode (interrupt service is disabled - property <Interrupt service>). This method 
                performs batches of the read flash memory operation, when the component works in the interrupt triggered mode 
                (interrupt service is enabled). This method is enabled only if the component works in the polled mode or if the 
                Read method is enabled.

Module "SPI2_Flash" (component SPIMaster_LDD)
   - SPI2_Flash_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - SPI2_Flash_Deinit -This method deinitializes the device. It switches off the device, frees the device data structure 
                memory, interrupts vectors, etc.
   - SPI2_Flash_Enable -This method enables SPI device. This method is intended to be used together with <Disable()> method to 
                temporary switch On/Off the device after the device is initialized. This method is required if the <Enabled in 
                init. code> property is set to "no" value.
   - SPI2_Flash_Disable -Disables the SPI device. When the device is disabled, some component methods should not be called. If 
                so, error ERR_DISABLED may be reported. This method is intended to be used together with <Enable()> method to 
                temporary switch on/off the device after the device is initialized. This method is not required. The <Deinit()> 
                method can be used to switch off and uninstall the device.
   - SPI2_Flash_SendBlock -This method sends a block of characters. The method returns ERR_BUSY when the previous block 
                transmission is not completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation.
   - SPI2_Flash_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the 
                specified number of characters is received. The method <CancelBlockReception> can be used to cancel a running 
                receive operation.
   - SPI2_Flash_GetSentDataNum -Returns the number of sent characters. This method is available only if method SendBlock is 
                enabled.
   - SPI2_Flash_GetReceivedDataNum -Returns the number of received characters in the receive buffer. This method is available 
                only if the ReceiveBlock method is enabled.
   - SPI2_Flash_GetError -This method returns a set of asserted flags. The flags are accumulated in the set. After calling this 
                method the set is returned and cleared. This method is enabled when SPI device support error detect.

Module "Sleep_Timer_LDD" (component TimerInt_LDD)
   - Sleep_Timer_LDD_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors 
                and sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is 
                set to "yes" value then the device is also enabled (see the description of the <Enable> method). In this case 
                the <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before 
                the second call of Init the <Deinit> must be called first.
   - Sleep_Timer_LDD_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.

Module "TU2"       (component TimerUnit_LDD)
   - TU2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU2_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors, 
                etc.

Module "ADC0_Vsense" (component ADC_LDD)
   - ADC0_Vsense_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - ADC0_Vsense_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - ADC0_Vsense_Enable -Enables ADC device. If possible, this method switches on A/D converter device, voltage reference, etc. 
                This method is intended to be used together with <Disable()> method to temporary switch On/Off the device after 
                the device is initialized. This method is required if the <Enabled in init. code> property is set to "no" value.
   - ADC0_Vsense_Disable -Disables the ADC device. If possible, this method switches off A/D converter device, voltage 
                reference, etc. (for example to avoid power consumption and possible interference). When the device is disabled,
                some component methods should not be called. If so, error ERR_DISABLED is reported. This method is intended to 
                be used together with <Enable()> method to temporary switch On/Off the device after the device is initialized. 
                This method is not required. The <Deinit()> method can be used to switch off and uninstall the device.
   - ADC0_Vsense_StartSingleMeasurement -This method starts one measurement of the selected group of samples and exits 
                immediately. The group of samples for measurement is specified by preceding call to <SelectSampleGroup()> or 
                <SelectSampleGroup()> method. The <OnMeasurementComplete() > event is invoked after the measurement is done and 
                the event is enabled. The state of the measurement can be also polled by the <GetMeasurementCompleteStatus()> 
                method. Results of the measurement can be read by the <GetMeasuredValues()> method. The <Discontinuous mode> 
                doesn't support this method.
   - ADC0_Vsense_CreateSampleGroup -This method prepares HW for next measurement according to array of samples defined during 
                run-time. The array of samples should be prepared prior to calling this method. Pointer to the array is passed 
                into this method in parameter SampleGroupPtr. The number of samples is defined by parameter SampleCount. Once 
                any group is prepared, the measurement can be started multiple times. Note: This method works only with the 
                sample groups defined during run-time. For design-time defined groups use <SelectSampleGroup()> method.
   - ADC0_Vsense_GetMeasuredValues -This method copies results of the last measurement to the user supplied buffer. Data size 
                depends on the size of measured sample group (see <SelectSampleGroup()> or <CreateSampleGroup()> method). Data 
                representation is defined by the <Result type> property. Typically this method is called from 
                <OnMeasurementComplete> event to get results of the last measurement.
   - ADC0_Vsense_GetMeasurementCompleteStatus -Returns whether the measurement is done and the results can be read by the user. 
                It can be used to poll the state of measurement if <Interrupt service/event> is disabled or if 
                <OnMeasurementComplete> event is disabled by the <SetEventMask()> methods.

Module "PORTA_GPIO" (component Init_GPIO_VAR0)
   - PORTA_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "PORTE_GPIO" (component Init_GPIO_VAR0)
   - PORTE_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "PORTC_GPIO" (component Init_GPIO_VAR0)
   - PORTC_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "PORTD_GPIO" (component Init_GPIO_VAR0)
   - PORTD_GPIO_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "CRC1"      (component CRC_LDD)
   - CRC1_Init -Initializes the device and allocates memory for the private device data structure.
   - CRC1_GetCRCResult -Returns actual CRC result. This method cannot be disabled if at least one of the following methods is 
                enabled: GetCRC8, GetCRC16, GetCRC32, GetBlockCRC.
   - CRC1_GetCRC8 -This method appends 1 data byte to current CRC calculation and returns new result. It automatically enables 
                code generation of GetCRCResult method.
   - CRC1_ResetCRC -Reset CRC module for new CRC computation. This method keeps previous settings (CRC standard, seed value...).

Module "whistle_random" (component RNG_LDD)
   - whistle_random_Init -Initializes the device according to design-time configuration properties. Allocates memory for the 
                device data structure.   This method can be called only once. Before the second call of Init the Deinit method 
                must be called first.
   - whistle_random_SetEventMask -This method masks the events of the interrupts generated by errors or interrupts generated 
                upon completion of seed and self test modes in the RNGB.
   - whistle_random_GetEventMask -This Methods returns the status of the interrupt error masks and interrupt completion masks.
   - whistle_random_InsertEntropy -Use this method to insert additional entropy to RNGA (current time using highest precision 
                possible, mouse and keyboard motions...).
   - whistle_random_Start -If RNGA is not started during initialization, use this method to start random number generator.
   - whistle_random_Main -This method is available only in polling mode. If interrupt service is disabled this method replaces 
                the RNG interrupt handler.
   - whistle_random_GetRandomNumber -This method gets the next random number generated by the RNG.

Module "I2C2"      (component I2C_LDD)
   - I2C2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - I2C2_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors,
                etc.
   - I2C2_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes inclusive 
                of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address must be 
                specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target slave 
                address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. The 
                state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent are 
                not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2C2_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2C2_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or general 
                call value. Any send or receive method directs to or from selected device, until a new slave device is selected 
                by this method. This method is available for the MASTER mode.
   - I2C2_GetError -Returns value of error mask, e.g. LDD_I2C_ARBIT_LOST.

Module "Cpu"       (component MK60DN512MC10)

===================================================================================
