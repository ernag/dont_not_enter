/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : ADC0_Vsense.h
**     Project     : ProcessorExpert
**     Processor   : MK60DN512VMC10
**     Component   : ADC_LDD
**     Version     : Component 01.115, Driver 01.08, CPU db: 3.00.000
**     Compiler    : CodeWarrior ARM C Compiler
**     Date/Time   : 2013-03-28, 10:13, # CodeGen: 73
**     Abstract    :
**         This device "ADC_LDD" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
**     Settings    :
**          Component name                                 : ADC0_Vsense
**          A/D converter                                  : ADC0
**          Discontinuous mode                             : no
**          Converter mode                                 : Sequential
**          Interrupt service/event                        : Disabled
**          A/D channel list                               : 2
**            Channel 0                                    : 
**              Channel mode                               : Single Ended
**                Input                                    : 
**                  A/D channel (pin)                      : ADC0_SE16/CMP1_IN2/ADC0_SE21
**                  A/D channel (pin) signal               : Corona_VBat
**            Channel 1                                    : 
**              Channel mode                               : Single Ended
**                Input                                    : 
**                  A/D channel (pin)                      : ADC1_SE16/CMP2_IN2/ADC0_SE22
**                  A/D channel (pin) signal               : Corona_UID
**          Static sample groups                           : Disabled
**          A/D resolution                                 : 16 bits
**          Low-power mode                                 : Enabled
**          High-speed conversion mode                     : Disabled
**          Asynchro clock output                          : Disabled
**          Sample time                                    : 4 clock periods
**          Number of conversions                          : 1
**          Conversion time                                : 10.416667 µs
**          ADC clock                                      : 2.399 MHz (416.667 ns)
**          Single conversion time - Single-ended          : 17.708 us
**          Single conversion time - Differential          : 21.458 us
**          Additional conversion time - Single-ended      : 10.416 us
**          Additional conversion time - Differential      : 14.166 us
**          Result type                                    : unsigned 16 bits, right justified
**          Trigger                                        : Disabled
**          Voltage reference                              : 
**            High voltage reference                       : 
**              Volt. ref. pin                             : VREFH
**              Volt. ref pin signal                       : 
**            Low voltage reference                        : 
**              Volt. ref. pin                             : VREFL
**              Volt. ref pin signal                       : 
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnMeasurementComplete                      : Disabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init                         - LDD_TDeviceData* ADC0_Vsense_Init(LDD_TUserData *UserDataPtr);
**         Deinit                       - void ADC0_Vsense_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         Enable                       - LDD_TError ADC0_Vsense_Enable(LDD_TDeviceData *DeviceDataPtr);
**         Disable                      - LDD_TError ADC0_Vsense_Disable(LDD_TDeviceData *DeviceDataPtr);
**         StartSingleMeasurement       - LDD_TError ADC0_Vsense_StartSingleMeasurement(LDD_TDeviceData *DeviceDataPtr);
**         CreateSampleGroup            - LDD_TError ADC0_Vsense_CreateSampleGroup(LDD_TDeviceData *DeviceDataPtr,...
**         GetMeasuredValues            - LDD_TError ADC0_Vsense_GetMeasuredValues(LDD_TDeviceData *DeviceDataPtr,...
**         GetMeasurementCompleteStatus - bool ADC0_Vsense_GetMeasurementCompleteStatus(LDD_TDeviceData *DeviceDataPtr);
**
**     Copyright : 1997 - 2012 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file ADC0_Vsense.h
** @version 01.08
** @date 2013-03-28, 10:13, # CodeGen: 73
** @brief
**         This device "ADC_LDD" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
*/         
/*!
**  @addtogroup ADC0_Vsense_module ADC0_Vsense module documentation
**  @{
*/         

#ifndef __ADC0_Vsense_H
#define __ADC0_Vsense_H

/* MODULE ADC0_Vsense. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "IO_Map.h"
#include "Cpu.h"
#include "ADC_PDD.h"


/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define ADC0_Vsense_PRPH_BASE_ADDRESS  0x4003B000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define ADC0_Vsense_Init_METHOD_ENABLED /*!< Init method of the component ADC0_Vsense is enabled (generated) */
#define ADC0_Vsense_Deinit_METHOD_ENABLED /*!< Deinit method of the component ADC0_Vsense is enabled (generated) */
#define ADC0_Vsense_Enable_METHOD_ENABLED /*!< Enable method of the component ADC0_Vsense is enabled (generated) */
#define ADC0_Vsense_Disable_METHOD_ENABLED /*!< Disable method of the component ADC0_Vsense is enabled (generated) */
#define ADC0_Vsense_StartSingleMeasurement_METHOD_ENABLED /*!< StartSingleMeasurement method of the component ADC0_Vsense is enabled (generated) */
#define ADC0_Vsense_CreateSampleGroup_METHOD_ENABLED /*!< CreateSampleGroup method of the component ADC0_Vsense is enabled (generated) */
#define ADC0_Vsense_GetMeasuredValues_METHOD_ENABLED /*!< GetMeasuredValues method of the component ADC0_Vsense is enabled (generated) */
#define ADC0_Vsense_GetMeasurementCompleteStatus_METHOD_ENABLED /*!< GetMeasurementCompleteStatus method of the component ADC0_Vsense is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */


/* Component specific public constants */

/* Driver mode */

/* A/D resolution of the component (the count of bits) */
#define ADC0_Vsense_ADC_RESOLUTION      16

/* Name of AD channel. If the "A/D channel (pin) signal" property in the channel
   pin group is not empty the constant "ComponentName_Signal" with the value of the channel
   index is generated, where the ComponentName = value of the "Component name" property
   and "Signal" is the value of the " A/D channel (pin) signal" property. This constant
   can be used in the method CreateSampleGroup() to specify required channel.
   (See ComponentName_TSample struct) */
#define ADC0_Vsense_Corona_VBat         0U
#define ADC0_Vsense_Corona_UID          1U

/* This constant contains the number of channels in the "A/D channel list"
   group */
#define ADC0_Vsense_CHANNEL_COUNT       2u

/* This constant can be used in the sample array to create a gap in sample group.
   It is intended to disable a measurement of a sample */
#define ADC0_Vsense_NO_CHANNEL          0x1FU



/* HW specific public constants */

/* Maximal number of samples in one sample group. This constant is HW specific.
   The CreateSampleGroup() method returns ERR_PARAM_SAMPLE_COUNT if the SampleCount parameter
   is greater then this constant. The value of this constant depends on the number
   of samples the HW is capable to measure in one measurement cycle. */
#define ADC0_Vsense_MAX_HW_SAMPLE_COUNT 1U

/* This constant informs about the actual width of results. */
#define ADC0_Vsense_RESULT_WIDTH        16U

/* This parameter informs about the type of results. */
#define ADC0_Vsense_RESULT_TYPE_UNSIGNED

/* Measurement result data type. Definition of the type depends
   on "Result type" property value. */
typedef uint16_t ADC0_Vsense_TResultData;


/*
** ===================================================================
**     Method      :  ADC0_Vsense_Init (component ADC_LDD)
*/
/*!
**     @brief
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc.
**         If the "Enable in init. code" is set to "yes" value then the
**         device is also enabled(see the description of the Enable()
**         method). In this case the Enable() method is not necessary
**         and needn't to be generated. 
**         This method can be called only once. Before the second call
**         of Init() the Deinit() must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* ADC0_Vsense_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  ADC0_Vsense_Deinit (component ADC_LDD)
*/
/*!
**     @brief
**         Deinitializes the device. Switches off the device, frees the
**         device data structure memory, interrupts vectors, etc.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
*/
/* ===================================================================*/
void ADC0_Vsense_Deinit(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  ADC0_Vsense_Enable (component ADC_LDD)
*/
/*!
**     @brief
**         Enables ADC device. If possible, this method switches on A/D
**         converter device, voltage reference, etc. This method is
**         intended to be used together with <Disable()> method to
**         temporary switch On/Off the device after the device is
**         initialized. This method is required if the <Enabled in init.
**         code> property is set to "no" value.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
*/
/* ===================================================================*/
LDD_TError ADC0_Vsense_Enable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  ADC0_Vsense_Disable (component ADC_LDD)
*/
/*!
**     @brief
**         Disables the ADC device. If possible, this method switches
**         off A/D converter device, voltage reference, etc. (for
**         example to avoid power consumption and possible interference).
**         When the device is disabled, some component methods should
**         not be called. If so, error ERR_DISABLED is reported. This
**         method is intended to be used together with <Enable()>
**         method to temporary switch On/Off the device after the
**         device is initialized. This method is not required. The
**         <Deinit()> method can be used to switch off and uninstall
**         the device.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
*/
/* ===================================================================*/
LDD_TError ADC0_Vsense_Disable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  ADC0_Vsense_StartSingleMeasurement (component ADC_LDD)
*/
/*!
**     @brief
**         This method starts one measurement of the selected group of
**         samples and exits immediately. The group of samples for
**         measurement is specified by preceding call to
**         <SelectSampleGroup()> or <SelectSampleGroup()> method. The
**         <OnMeasurementComplete() > event is invoked after the
**         measurement is done and the event is enabled. The state of
**         the measurement can be also polled by the
**         <GetMeasurementCompleteStatus()> method. Results of the
**         measurement can be read by the <GetMeasuredValues()> method.
**         The <Discontinuous mode> doesn't support this method.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - A measurement is in progress 
*/
/* ===================================================================*/
LDD_TError ADC0_Vsense_StartSingleMeasurement(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  ADC0_Vsense_CreateSampleGroup (component ADC_LDD)
*/
/*!
**     @brief
**         This method prepares HW for next measurement according to
**         array of samples defined during run-time. The array of
**         samples should be prepared prior to calling this method.
**         Pointer to the array is passed into this method in parameter
**         SampleGroupPtr. The number of samples is defined by
**         parameter SampleCount. Once any group is prepared, the
**         measurement can be started multiple times. Note: This method
**         works only with the sample groups defined during run-time.
**         For design-time defined groups use <SelectSampleGroup()>
**         method.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         SampleGroupPtr  - Pointer to the
**                           sample definition array. This array can be
**                           released as soon as the method ends.
**     @param
**         SampleCount     - Number of items in the
**                           sample definition array. Must be less than
**                           or equal to
**                           ComponentName_MAX_HW_SAMPLE_COUNT.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
**                           ERR_DISABLED - Component is disabled
**                           ERR_PARAM_INDEX - Channel index in
**                           SampleGroup structure is out of range
**                           ERR_PARAM_SAMPLE_COUNT - SampleCount
**                           variable value is out of range
**                           ERR_BUSY - Measurement is in progress 
*/
/* ===================================================================*/
LDD_TError ADC0_Vsense_CreateSampleGroup(LDD_TDeviceData *DeviceDataPtr, LDD_ADC_TSample *SampleGroupPtr, uint8_t SampleCount);

/*
** ===================================================================
**     Method      :  ADC0_Vsense_GetMeasuredValues (component ADC_LDD)
*/
/*!
**     @brief
**         This method copies results of the last measurement to the
**         user supplied buffer. Data size depends on the size of
**         measured sample group (see <SelectSampleGroup()> or
**         <CreateSampleGroup()> method). Data representation is
**         defined by the <Result type> property. Typically this method
**         is called from <OnMeasurementComplete> event to get results
**         of the last measurement.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         BufferPtr       - Pointer to the start of the
**                           buffer for new results. Count of stored
**                           measured values equals to the count of the
**                           samples in the active sample group. It is
**                           in the user responsibility to provide
**                           buffer with appropriate size.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
**                           ERR_DISABLED - Component is disabled
*/
/* ===================================================================*/
LDD_TError ADC0_Vsense_GetMeasuredValues(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr);

/*
** ===================================================================
**     Method      :  ADC0_Vsense_GetMeasurementCompleteStatus (component ADC_LDD)
*/
/*!
**     @brief
**         Returns whether the measurement is done and the results can
**         be read by the user. It can be used to poll the state of
**         measurement if <Interrupt service/event> is disabled or if
**         <OnMeasurementComplete> event is disabled by the
**         <SetEventMask()> methods.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - Error code
**                           true - Measurement is done
**                           false - Measurement is in progress
*/
/* ===================================================================*/
bool ADC0_Vsense_GetMeasurementCompleteStatus(LDD_TDeviceData *DeviceDataPtr);

/* END ADC0_Vsense. */

#endif
/* ifndef __ADC0_Vsense_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0.12 [05.05]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
