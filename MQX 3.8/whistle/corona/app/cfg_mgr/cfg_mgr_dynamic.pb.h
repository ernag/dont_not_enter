/* Automatically generated nanopb header */
/* Generated by nanopb-0.2.0 at Mon Dec 09 14:00:14 2013. */

#ifndef _PB_CFG_MGR_DYNAMIC_PB_H_
#define _PB_CFG_MGR_DYNAMIC_PB_H_
#include <pb.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _PomType {
    PomType_POM_SPP = 1,
    PomType_POM_IAP = 2
} PomType;

/* Struct definitions */
typedef struct _ActivityCfg {
    bool has_daily_minutes_active_goal;
    uint32_t daily_minutes_active_goal;
} ActivityCfg;

typedef struct _BluetoothCfg {
    pb_callback_t LinkKeyInfo;
    bool has_BtDeviceName;
    pb_callback_t BtDeviceName;
    bool has_mru_index;
    uint32_t mru_index;
} BluetoothCfg;

typedef struct {
    size_t size;
    uint8_t bytes[16];
} LinkKeyInfo_Key_t;

typedef struct {
    size_t size;
    uint8_t bytes[6];
} LinkKeyInfo_Addr_t;

typedef struct _LinkKeyInfo {
    bool has_Key;
    LinkKeyInfo_Key_t Key;
    bool has_Addr;
    LinkKeyInfo_Addr_t Addr;
    bool has_usage_count;
    uint32_t usage_count;
    bool has_pom;
    PomType pom;
} LinkKeyInfo;

typedef struct _SecurityWEP {
    bool has_key;
    pb_callback_t key;
    bool has_default_key_index;
    uint32_t default_key_index;
} SecurityWEP;

typedef struct _SecurityWPA {
    bool has_version;
    pb_callback_t version;
    bool has_passphrase;
    pb_callback_t passphrase;
    bool has_ucipher;
    uint32_t ucipher;
    bool has_mcipher;
    uint32_t mcipher;
} SecurityWPA;

typedef struct _SystemInfo {
    bool has_lastFWUAttempt;
    uint32_t lastFWUAttempt;
    bool has_installFlag;
    uint32_t installFlag;
    bool has_deviceHasCheckedIn;
    uint32_t deviceHasCheckedIn;
} SystemInfo;

typedef struct _TimeCfg {
    bool has_timezone_offset;
    int64_t timezone_offset;
} TimeCfg;

typedef struct _UserNetworks {
    pb_callback_t network;
    bool has_mru_ssid;
    pb_callback_t mru_ssid;
} UserNetworks;

typedef struct _NetworkSecurity {
    bool has_securityType;
    uint32_t securityType;
    bool has_wepParams;
    SecurityWEP wepParams;
    bool has_wpaParams;
    SecurityWPA wpaParams;
} NetworkSecurity;

typedef struct _UserInfo {
    bool has_dogName;
    pb_callback_t dogName;
    bool has_userNetwork;
    UserNetworks userNetwork;
    bool has_btCfg;
    BluetoothCfg btCfg;
    bool has_activityCfg;
    ActivityCfg activityCfg;
    bool has_timeCfg;
    TimeCfg timeCfg;
} UserInfo;

typedef struct _ConfigDynamic {
    bool has_userInfo;
    UserInfo userInfo;
    bool has_sysInfo;
    SystemInfo sysInfo;
} ConfigDynamic;

typedef struct _Network {
    bool has_ssid;
    pb_callback_t ssid;
    bool has_security;
    NetworkSecurity security;
} Network;

/* Default values for struct fields */

/* Struct field encoding specification for nanopb */
extern const pb_field_t ConfigDynamic_fields[3];
extern const pb_field_t UserInfo_fields[6];
extern const pb_field_t ActivityCfg_fields[2];
extern const pb_field_t TimeCfg_fields[2];
extern const pb_field_t UserNetworks_fields[3];
extern const pb_field_t Network_fields[3];
extern const pb_field_t NetworkSecurity_fields[4];
extern const pb_field_t SecurityWEP_fields[3];
extern const pb_field_t SecurityWPA_fields[5];
extern const pb_field_t BluetoothCfg_fields[4];
extern const pb_field_t LinkKeyInfo_fields[5];
extern const pb_field_t SystemInfo_fields[4];

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
