/* Automatically generated nanopb header */
/* Generated by nanopb-0.2.0 at Fri Feb 21 13:12:24 2014. */

#ifndef _PB_DATAMESSAGE_PB_H_
#define _PB_DATAMESSAGE_PB_H_
#include <pb.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _DataEventType {
    DataEventType_ACCEL_DATA = 1,
    DataEventType_ACCEL_SLEEP = 2,
    DataEventType_BT_PROXIMITY = 3,
    DataEventType_BREAD_CRUMB = 4,
    DataEventType_REBOOT = 5,
    DataEventType_ERROR = 6,
    DataEventType_DEVICE_BOOT = 99
} DataEventType;

typedef enum _BreadCrumbEvent {
    BreadCrumbEvent_USB_CONNECTED = 1,
    BreadCrumbEvent_USB_DISCONNECTED = 2,
    BreadCrumbEvent_BATTERY_LOW = 3,
    BreadCrumbEvent_WIFI_START = 4,
    BreadCrumbEvent_WIFI_DONE = 5,
    BreadCrumbEvent_WIFI_FAILED = 6,
    BreadCrumbEvent_EVTMGR_RESET = 7,
    BreadCrumbEvent_EVTMGR_INIT = 8,
    BreadCrumbEvent_EVTMGR_WRAP_INFO = 9,
    BreadCrumbEvent_EXT_FLASH_WIP_AT_BOOT = 10,
    BreadCrumbEvent_EXT_FLASH_IN_USE_AT_REBOOT = 11,
    BreadCrumbEvent_NON_GRACEFUL_ASSERT = 12,
    BreadCrumbEvent_EXITING_SHIP_MODE = 13,
    BreadCrumbEvent_PERSIST_MEM_RESET = 14,
    BreadCrumbEvent_DYNAMIC_CFG_DECODE_FAILED = 15,
    BreadCrumbEvent_DYNAMIC_CFG_RESET = 16,
    BreadCrumbEvent_EVTMGR_INVALID_ADDRESS = 17,
    BreadCrumbEvent_EVTMGR_NO_EVT_BLK_PTRS = 18,
    BreadCrumbEvent_FWUMGR_DL_COMPLETE = 19,
    BreadCrumbEvent_PMEM_RESET_CRC_INVALID = 20,
    BreadCrumbEvent_PMEM_RESET_MAGIC_INVALID = 21,
    BreadCrumbEvent_DYNAMIC_CFG_DEC_OUT_OF_BOUNDS = 22,
    BreadCrumbEvent_DYNAMIC_CFG_ENC_OUT_OF_BOUNDS = 23,
    BreadCrumbEvent_DYNAMIC_CFG_ENCODE_FAILED = 24
} BreadCrumbEvent;

typedef enum _FwErrorStatusConnectionStatus {
    FwErrorStatusConnectionStatus_NO_CONNECTION = 0,
    FwErrorStatusConnectionStatus_WIFI_ON = 1,
    FwErrorStatusConnectionStatus_BTC_ON = 2,
    FwErrorStatusConnectionStatus_BTLE_ON = 3
} FwErrorStatusConnectionStatus;

typedef enum _FwErrorStatus {
    FwErrorStatus_CONNECTION_STATUS_MASK = 3
} FwErrorStatus;

typedef enum _AccelDataEncoding {
    AccelDataEncoding_ACCEL_ENC_S8 = 1,
    AccelDataEncoding_ACCEL_ENC_S16 = 2,
    AccelDataEncoding_ACCEL_ENC_DIFF_S8 = 3,
    AccelDataEncoding_ACCEL_ENC_DIFF_S16 = 4,
    AccelDataEncoding_ACCEL_ENC_DIFF_RICE_K0 = 5,
    AccelDataEncoding_ACCEL_ENC_DIFF_RICE_K1 = 6,
    AccelDataEncoding_ACCEL_ENC_DIFF_RICE_K2 = 7,
    AccelDataEncoding_ACCEL_ENC_DIFF_RICE_K3 = 8,
    AccelDataEncoding_ACCEL_ENC_DIFF_RICE_K4 = 9,
    AccelDataEncoding_ACCEL_ENC_DIFF_RICE_K5 = 10,
    AccelDataEncoding_ACCEL_ENC_DIFF_RICE_K6 = 11,
    AccelDataEncoding_ACCEL_ENC_DIFF_RICE_K7 = 12
} AccelDataEncoding;

typedef enum _BatteryStatus_StatusFlags {
    BatteryStatus_StatusFlags_wifi_on = 1,
    BatteryStatus_StatusFlags_bt_on = 2
} BatteryStatus_StatusFlags;

/* Struct definitions */
typedef struct _AccelData {
    bool has_absoluteStartTime;
    uint64_t absoluteStartTime;
    bool has_relativeStartTime;
    uint64_t relativeStartTime;
    bool has_sampleFrequency;
    int32_t sampleFrequency;
    bool has_encodingType;
    AccelDataEncoding encodingType;
    bool has_resolution;
    int32_t resolution;
    bool has_range;
    int32_t range;
    bool has_payload;
    pb_callback_t payload;
    bool has_thirtyTwoBitCRCPostPayload;
    uint32_t thirtyTwoBitCRCPostPayload;
} AccelData;

typedef struct _AccelSleep {
    bool has_absTimeStart;
    uint64_t absTimeStart;
    bool has_relTimeStart;
    uint64_t relTimeStart;
    bool has_duration;
    uint64_t duration;
} AccelSleep;

typedef struct _BatteryStatus {
    bool has_absoluteTime;
    uint64_t absoluteTime;
    bool has_relativeTime;
    uint64_t relativeTime;
    bool has_batteryCounts;
    uint32_t batteryCounts;
    bool has_batteryPercentage;
    uint32_t batteryPercentage;
    bool has_temperatureCounts;
    uint32_t temperatureCounts;
    bool has_statusFlags;
    uint32_t statusFlags;
    bool has_batteryMillivolts;
    uint32_t batteryMillivolts;
    bool has_zeroBattMvThresh;
    uint32_t zeroBattMvThresh;
    bool has_battTemperatureCounts;
    uint32_t battTemperatureCounts;
} BatteryStatus;

typedef struct _BreadCrumb {
    bool has_absoluteTime;
    uint64_t absoluteTime;
    bool has_relativeTime;
    uint64_t relativeTime;
    bool has_eventType;
    BreadCrumbEvent eventType;
} BreadCrumb;

typedef struct _BtProximity {
    bool has_absoluteStartTime;
    uint64_t absoluteStartTime;
    bool has_relativeStartTime;
    uint64_t relativeStartTime;
    bool has_macAddress;
    uint64_t macAddress;
} BtProximity;

typedef struct _DataDump {
    bool has_relTimeAtSend;
    uint64_t relTimeAtSend;
    pb_callback_t accelData;
    pb_callback_t accelSleep;
    pb_callback_t btProximity;
    pb_callback_t crumb;
    pb_callback_t reboot;
    pb_callback_t err;
    pb_callback_t batteryStatus;
} DataDump;

typedef struct _FwError {
    bool has_absoluteTime;
    uint64_t absoluteTime;
    bool has_relativeTime;
    uint64_t relativeTime;
    bool has_fwErrCode;
    uint32_t fwErrCode;
    bool has_description_str;
    pb_callback_t description_str;
    bool has_file_str;
    pb_callback_t file_str;
    bool has_function_str;
    pb_callback_t function_str;
    bool has_line;
    uint32_t line;
    bool has_status;
    uint32_t status;
} FwError;

typedef struct _Reboot {
    bool has_absoluteTime;
    uint64_t absoluteTime;
    bool has_relativeTime;
    uint64_t relativeTime;
    bool has_reason;
    uint32_t reason;
    bool has_bootingUp;
    uint32_t bootingUp;
    bool has_thread;
    uint32_t thread;
} Reboot;

/* Default values for struct fields */
extern const int32_t AccelData_resolution_default;
extern const int32_t AccelData_range_default;

/* Struct field encoding specification for nanopb */
extern const pb_field_t DataDump_fields[9];
extern const pb_field_t FwError_fields[9];
extern const pb_field_t BreadCrumb_fields[4];
extern const pb_field_t Reboot_fields[6];
extern const pb_field_t AccelSleep_fields[4];
extern const pb_field_t AccelData_fields[9];
extern const pb_field_t BtProximity_fields[4];
extern const pb_field_t BatteryStatus_fields[10];

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
