/* Automatically generated nanopb header */
/* Generated by nanopb-0.2.0 at Mon Feb 03 08:58:30 2014. */

#ifndef _PB_WHISTLEMESSAGE_PB_H_
#define _PB_WHISTLEMESSAGE_PB_H_
#include <pb.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _WhistleMessageType {
    WhistleMessageType_DATA_DUMP = 1,
    WhistleMessageType_REMOTE_DEV_MGMT = 2,
    WhistleMessageType_LOCAL_DEV_MGMT = 3
} WhistleMessageType;

typedef enum _TransactionType {
    TransactionType_TRANS_REQUEST = 1,
    TransactionType_TRANS_RESPONSE_ACK = 2,
    TransactionType_TRANS_RESPONSE_NAK = 3
} TransactionType;

typedef enum _progressType {
    progressType_PROGRESS_NOT_USED = 0,
    progressType_PROGRESS_FIRST_MSG = 1,
    progressType_PROGRESS_LAST_MSG = 100
} progressType;

typedef enum _RmMessageType {
    RmMessageType_RM_CHECK_IN = 1,
    RmMessageType_RM_FWU_MANIFEST = 2,
    RmMessageType_RM_FWU_STATUS = 3,
    RmMessageType_RM_CONFIG = 4,
    RmMessageType_RM_CHECK_IN_REQ = 5,
    RmMessageType_RM_CHECK_IN_RESP = 6,
    RmMessageType_RM_FWU_MANIFEST_REQ = 7,
    RmMessageType_RM_FWU_MANIFEST_RESP = 8,
    RmMessageType_RM_FWU_STATUS_REQ = 9,
    RmMessageType_RM_FWU_STATUS_RESP = 10,
    RmMessageType_RM_CONFIG_REQ = 11,
    RmMessageType_RM_CONFIG_RESP = 12
} RmMessageType;

typedef enum _RmCheckInRequestType {
    RmCheckInRequestType_RM_CHECK_IN_MANUAL_SYNC = 1,
    RmCheckInRequestType_RM_CHECK_IN_AUTO_SYNC = 2
} RmCheckInRequestType;

typedef enum _RmCheckInTransportType {
    RmCheckInTransportType_TRANSPORT_UNKNOWN = 1,
    RmCheckInTransportType_TRANSPORT_WIFI = 2,
    RmCheckInTransportType_TRANSPORT_BTC_ANDROID = 3,
    RmCheckInTransportType_TRANSPORT_BTC_IOS = 4
} RmCheckInTransportType;

typedef enum _RmCheckInResponseActionType {
    RmCheckInResponseActionType_CHECK_IN_PENDING_FIRMWARE_UPDATE = 1,
    RmCheckInResponseActionType_CHECK_IN_PENDING_DEVICE_CONFIG = 2
} RmCheckInResponseActionType;

typedef enum _RmFwuStatusPostStatus {
    RmFwuStatusPostStatus_FWU_DOWNLOAD_SUCCESS = 1,
    RmFwuStatusPostStatus_FWU_DOWNLOAD_FAILED_TIMEOUT = 2,
    RmFwuStatusPostStatus_FWU_DOWNLOAD_FAILED_ACCESS_DENIED = 3,
    RmFwuStatusPostStatus_FWU_DOWNLOAD_FAILED_CRC_FAILED = 4,
    RmFwuStatusPostStatus_FWU_DOWNLOAD_FAILED_SIGNATURE_FAILED = 5,
    RmFwuStatusPostStatus_FWU_DOWNLOAD_FAILED_OTHER = 6,
    RmFwuStatusPostStatus_FWU_INSTALL_SUCCESS = 20,
    RmFwuStatusPostStatus_FWU_INSTALL_FAILED_PARSE_ERROR = 21,
    RmFwuStatusPostStatus_FWU_INSTALL_DEPENDENCY_ERROR = 22,
    RmFwuStatusPostStatus_FWU_INSTALL_FAILED_OTHER = 23
} RmFwuStatusPostStatus;

typedef enum _LmMessageType {
    LmMessageType_LM_MOBILE_STAT_REQ = 1,
    LmMessageType_LM_MOBILE_STAT_RESP = 2,
    LmMessageType_LM_MOBILE_STAT_NOTIFY = 11,
    LmMessageType_LM_WIFI_SCAN_REQ = 3,
    LmMessageType_LM_WIFI_SCAN_RESP = 4,
    LmMessageType_LM_WIFI_TEST_REQ = 5,
    LmMessageType_LM_WIFI_TEST_RESP = 6,
    LmMessageType_LM_WIFI_ADD_REQ = 7,
    LmMessageType_LM_WIFI_ADD_RESP = 8,
    LmMessageType_LM_WIFI_REM_REQ = 9,
    LmMessageType_LM_WIFI_REM_RESP = 10,
    LmMessageType_LM_DEV_STAT_NOTIFY = 12,
    LmMessageType_LM_WIFI_LIST_REQ = 13,
    LmMessageType_LM_WIFI_LIST_RESP = 14
} LmMessageType;

typedef enum _LmInitType {
    LmInitType_LM_INIT_MANUAL = 1,
    LmInitType_LM_INIT_AUTO = 2
} LmInitType;

typedef enum _LmMobileStatus {
    LmMobileStatus_MOBILE_STATUS_OK = 1,
    LmMobileStatus_MOBILE_STATUS_BUSY = 11,
    LmMobileStatus_MOBILE_STATUS_NO_WAN = 12,
    LmMobileStatus_MOBILE_STATUS_DEV_MGMT = 13
} LmMobileStatus;

typedef enum _LmWiFiNetworkType {
    LmWiFiNetworkType_WIFI_NETWORK_TYPE_NONE = 1,
    LmWiFiNetworkType_WIFI_NETWORK_TYPE_WEP = 2,
    LmWiFiNetworkType_WIFI_NETWORK_TYPE_WPA = 3,
    LmWiFiNetworkType_WIFI_NETWORK_TYPE_WPA2 = 4
} LmWiFiNetworkType;

typedef enum _LmWiFiNetworkuCipher {
    LmWiFiNetworkuCipher_WIFI_NETWORK_UCIPHER_TKIP = 1,
    LmWiFiNetworkuCipher_WIFI_NETWORK_UCIPHER_CCMP = 2
} LmWiFiNetworkuCipher;

typedef enum _LmWiFiNetworkmCipher {
    LmWiFiNetworkmCipher_WIFI_NETWORK_MCIPHER_AES = 1,
    LmWiFiNetworkmCipher_WIFI_NETWORK_MCIPHER_TKIP = 2
} LmWiFiNetworkmCipher;

typedef enum _LmWiFiTestStatus {
    LmWiFiTestStatus_LM_WIFI_TEST_PASSED = 1,
    LmWiFiTestStatus_LM_WIFI_TEST_FAILED = 11
} LmWiFiTestStatus;

typedef enum _LmWiFiAddStatus {
    LmWiFiAddStatus_LM_WIFI_ADD_STATUS_SUCCESS = 1,
    LmWiFiAddStatus_LM_WIFI_ADD_FAILED = 11
} LmWiFiAddStatus;

typedef enum _LmWiFiRemStatus {
    LmWiFiRemStatus_LM_WIFI_REM_STATUS_SUCCESS = 1,
    LmWiFiRemStatus_LM_WIFI_REM_FAILED = 11
} LmWiFiRemStatus;

typedef enum _LmDevStatus {
    LmDevStatus_LM_DEV_STATUS_READY_FOR_MGMT = 1,
    LmDevStatus_LM_DEV_STATUS_DONE = 2
} LmDevStatus;

/* Struct definitions */
typedef struct _LmDevStat {
    bool has_status;
    LmDevStatus status;
} LmDevStat;

typedef struct _LmMobileStat {
    bool has_status;
    LmMobileStatus status;
    bool has_serverAbsoluteTime;
    int64_t serverAbsoluteTime;
} LmMobileStat;

typedef struct _LmMobileStatRequest {
    bool has_initType;
    LmInitType initType;
    bool has_mobileBTMAC;
    int64_t mobileBTMAC;
    bool has_batteryLevel;
    int32_t batteryLevel;
    bool has_wifiMac;
    pb_callback_t wifiMac;
    bool has_wifiVer;
    pb_callback_t wifiVer;
} LmMobileStatRequest;

typedef struct _LmWiFiListResponse {
    pb_callback_t network;
} LmWiFiListResponse;

typedef struct _LmWiFiNetwork {
    bool has_ssid;
    pb_callback_t ssid;
    bool has_type;
    LmWiFiNetworkType type;
    bool has_uCipher;
    LmWiFiNetworkuCipher uCipher;
    bool has_mCipher;
    LmWiFiNetworkmCipher mCipher;
    bool has_isHidden;
    bool isHidden;
    bool has_password;
    pb_callback_t password;
} LmWiFiNetwork;

typedef struct _LmWiFiRemRequest {
    bool has_ssid;
    pb_callback_t ssid;
} LmWiFiRemRequest;

typedef struct _LmWiFiRemResponse {
    bool has_status;
    LmWiFiRemStatus status;
    bool has_ssid;
    pb_callback_t ssid;
} LmWiFiRemResponse;

typedef struct _LmWiFiScanResponse {
    pb_callback_t network;
} LmWiFiScanResponse;

typedef struct _LocalMgmtMsg {
    bool has_messageType;
    LmMessageType messageType;
    bool has_payload;
    pb_callback_t payload;
} LocalMgmtMsg;

typedef struct _RmCheckInRequest {
    bool has_requestType;
    RmCheckInRequestType requestType;
    bool has_currentBoot1Version;
    pb_callback_t currentBoot1Version;
    bool has_currentBoot2Version;
    pb_callback_t currentBoot2Version;
    bool has_currentAppVersion;
    pb_callback_t currentAppVersion;
    bool has_batteryLevel;
    int32_t batteryLevel;
    bool has_batteryCounts;
    uint32_t batteryCounts;
    bool has_temperatureCounts;
    uint32_t temperatureCounts;
    bool has_wifiFWVersion;
    uint32_t wifiFWVersion;
    bool has_currentMinutesActive;
    uint32_t currentMinutesActive;
    bool has_transportType;
    RmCheckInTransportType transportType;
} RmCheckInRequest;

typedef struct _RmCheckInResponse {
    bool has_pendingAction;
    RmCheckInResponseActionType pendingAction;
    bool has_serverAbsoluteTime;
    int64_t serverAbsoluteTime;
    bool has_bluetoothName;
    pb_callback_t bluetoothName;
    bool has_activityGoal;
    int32_t activityGoal;
    bool has_utcOffsetSeconds;
    int32_t utcOffsetSeconds;
} RmCheckInResponse;

typedef struct _RmConfigItem {
    bool has_type;
    pb_callback_t type;
    bool has_value;
    pb_callback_t value;
} RmConfigItem;

typedef struct _RmConfigRequest {
    bool has_currentStreamConfigVersion;
    int64_t currentStreamConfigVersion;
    bool has_currentUniqueConfigVersion;
    int64_t currentUniqueConfigVersion;
} RmConfigRequest;

typedef struct _RmConfigResponse {
    bool has_streamConfigVersion;
    int64_t streamConfigVersion;
    bool has_uniqueConfigVersion;
    int64_t uniqueConfigVersion;
    pb_callback_t configItem;
} RmConfigResponse;

typedef struct _RmFwuManifestRequest {
    bool has_currentBoot1Version;
    pb_callback_t currentBoot1Version;
    bool has_currentBoot2Version;
    pb_callback_t currentBoot2Version;
    bool has_currentAppVersion;
    pb_callback_t currentAppVersion;
} RmFwuManifestRequest;

typedef struct _RmFwuManifestResponse {
    bool has_firmwareUpdateVersion;
    pb_callback_t firmwareUpdateVersion;
    bool has_packageUrl;
    pb_callback_t packageUrl;
} RmFwuManifestResponse;

typedef struct _RmFwuStatusPost {
    bool has_attemptedFirmwareUpdateVersion;
    pb_callback_t attemptedFirmwareUpdateVersion;
    bool has_status;
    RmFwuStatusPostStatus status;
    bool has_attemptedBoot1Version;
    pb_callback_t attemptedBoot1Version;
    bool has_attemptedBoot2Version;
    pb_callback_t attemptedBoot2Version;
    bool has_attemptedAppVersion;
    pb_callback_t attemptedAppVersion;
} RmFwuStatusPost;

typedef struct _LmWiFiAddRequest {
    bool has_network;
    LmWiFiNetwork network;
} LmWiFiAddRequest;

typedef struct _LmWiFiAddResponse {
    bool has_status;
    LmWiFiAddStatus status;
    bool has_network;
    LmWiFiNetwork network;
} LmWiFiAddResponse;

typedef struct _LmWiFiTestRequest {
    bool has_network;
    LmWiFiNetwork network;
} LmWiFiTestRequest;

typedef struct _LmWiFiTestResponse {
    bool has_status;
    LmWiFiTestStatus status;
    bool has_network;
    LmWiFiNetwork network;
} LmWiFiTestResponse;

typedef struct _RemoteMgmtMsg {
    bool has_messageType;
    RmMessageType messageType;
    bool has_checkInRequest;
    RmCheckInRequest checkInRequest;
    bool has_checkInResponse;
    RmCheckInResponse checkInResponse;
    bool has_fwuManifestRequest;
    RmFwuManifestRequest fwuManifestRequest;
    bool has_fwuManifestResponse;
    RmFwuManifestResponse fwuManifestResponse;
    bool has_fwuStatusPost;
    RmFwuStatusPost fwuStatusPost;
    bool has_configRequest;
    RmConfigRequest configRequest;
    bool has_configResponse;
    RmConfigResponse configResponse;
    bool has_payload;
    pb_callback_t payload;
} RemoteMgmtMsg;

typedef struct _WhistleMessage {
    bool has_objectType;
    WhistleMessageType objectType;
    bool has_transactionType;
    TransactionType transactionType;
    bool has_magicChecksum;
    uint32_t magicChecksum;
    bool has_serialNumber;
    pb_callback_t serialNumber;
    bool has_dataDump;
    pb_callback_t dataDump;
    bool has_remoteMgmtMsg;
    RemoteMgmtMsg remoteMgmtMsg;
    bool has_localMgmtMsg;
    LocalMgmtMsg localMgmtMsg;
    bool has_progress;
    uint32_t progress;
} WhistleMessage;

/* Default values for struct fields */
extern const uint32_t WhistleMessage_progress_default;

/* Struct field encoding specification for nanopb */
extern const pb_field_t WhistleMessage_fields[9];
extern const pb_field_t RemoteMgmtMsg_fields[10];
extern const pb_field_t RmCheckInRequest_fields[11];
extern const pb_field_t RmCheckInResponse_fields[6];
extern const pb_field_t RmFwuManifestRequest_fields[4];
extern const pb_field_t RmFwuManifestResponse_fields[3];
extern const pb_field_t RmFwuStatusPost_fields[6];
extern const pb_field_t RmConfigRequest_fields[3];
extern const pb_field_t RmConfigItem_fields[3];
extern const pb_field_t RmConfigResponse_fields[4];
extern const pb_field_t LocalMgmtMsg_fields[3];
extern const pb_field_t LmMobileStatRequest_fields[6];
extern const pb_field_t LmMobileStat_fields[3];
extern const pb_field_t LmWiFiNetwork_fields[7];
extern const pb_field_t LmWiFiScanResponse_fields[2];
extern const pb_field_t LmWiFiTestRequest_fields[2];
extern const pb_field_t LmWiFiTestResponse_fields[3];
extern const pb_field_t LmWiFiAddRequest_fields[2];
extern const pb_field_t LmWiFiAddResponse_fields[3];
extern const pb_field_t LmWiFiRemRequest_fields[2];
extern const pb_field_t LmWiFiRemResponse_fields[3];
extern const pb_field_t LmDevStat_fields[2];
extern const pb_field_t LmWiFiListResponse_fields[2];

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
