/*
 * app_errors.h
 * Defines 32-bit error codes in the Corona application.
 *
 *  Created on: Mar 8, 2013
 *      Author: Ernie
 */

#ifndef APP_ERRORS_H_
#define APP_ERRORS_H_

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include "psptypes.h"


////////////////////////////////////////////////////////////////////////////////
// Public Declarations
////////////////////////////////////////////////////////////////////////////////
/*
 *   Standard Numbered Info Handling Macro
 *     This will log/print the info.
 *     pass the number, then standard printf type of input, like:
 */
//#define PROCESS_NINFO(number, ...)  (_numbered_info_log((int)(number), (const char *)0, __func__, __LINE__, ##__VA_ARGS__))
#define PROCESS_NINFO(number, ...)  (_numbered_info_log((int)(number), 1, __FILE__, (const char *)0, __LINE__, ##__VA_ARGS__))

/*
 *   Standard Number Info Handling for NOT printing to console.
 */
#define PROCESS_NINFO_NO_PRINT(number, ...)  (_numbered_info_log((int)(number), 0, __FILE__, (const char *)0, __LINE__, ##__VA_ARGS__))

/*
 *   Standard Numbered Info Handling for byte streams.
 */
#define PROCESS_NINFO_BYTES(number, payload, num_bytes)  (_numbered_info_log_bytes((int)(number), __FILE__, (const char *)0, __LINE__, payload, num_bytes))

/*
 *   Standard Unnumbered Info Handling Macro
 */
#define PROCESS_UINFO(...)      (_numbered_info_log(UNNUMBERED_INFO, 1, (const char *)0, (const char *)0, 123456, ##__VA_ARGS__))

/*
 *   Standard Macro for handling printing errors to console (but NOT to server).
 */
#define WPRINT_ERR(...)   (_app_err_print(0, ##__VA_ARGS__))

/*
 * No number
 *  This is the reserved number that indicates absence of info
 */
#define NUMBERED_INFO_NUMBER_NONE 0

/*
 *   Unnumbered Information
 *    These will all be muxed into the special number 0xF1D0 to reduce number explosion and yet be unlimited.
 */
#define UNNUMBERED_INFO 0xF1D0  // 61904 decimal


////////////////////////////////////////////////////////////////////////////////
// Whistle Error Codes
////////////////////////////////////////////////////////////////////////////////
typedef enum _err_t
{
	/*
	 *   Success
	 */
	ERR_OK = NUMBERED_INFO_NUMBER_NONE,
	
	/*
	 *   Universal Errors
	 */
	ERR_GENERIC = 0x1,
	ERR_MEM_ALLOC = 0x2,
	ERR_FAULT = 0x3,
	ERR_NOTAVAIL = 0x4,
	ERR_PARAM_MASK = 0x5,
	ERR_WASSERT = 0x6,
	ERR_FLUSH = 0x7,
	ERR_TASK_GENERIC = 0x8,
	ERR_MUTEX = 0x9,
	ERR_UNHANDLED_INT_EXCEPTION = 0xA,
	ERR_ZERO_LEN_WMP = 0xB,
	ERR_ARM_EXCEPTION = 0xC,
	ERR_MEM_FREE = 0xD,
	ERR_NO_SER_IN_FCFG = 0xE,
	ERR_MUTEX_ATTR = 0xF,
	ERR_MUTEX_INIT = 0x10,
	ERR_MUTEX_LOCK = 0x11,
	ERR_MUTEX_UNLOCK = 0x12,
	ERR_NON_GRACEFUL_ASSERT_VERBOSE = 0x13,
	ERR_SPAM = 0x14,
	ERR_INTERRUPT_DISABLED_TOO_LONG = 0x15,
	ERR_ASSERT_DATA = 0x16,
	ERR_ARM_EXCEPTION_DATA = 0x17,
	ERR_VSNPRINTF = 0x18,

	/*
	 *   Button Errors
	 */
	ERR_BUTTON_OFFSET = 0x0100,
	ERR_BUTTON_GENERIC = (ERR_BUTTON_OFFSET+0),
	ERR_BUTTON_CALLBACKS_FULL = (ERR_BUTTON_OFFSET+1),
	ERR_BUTTON_CALLBACK_NOT_FOUND = (ERR_BUTTON_OFFSET+2),
	ERR_BUTTON_INIT = (ERR_BUTTON_OFFSET+3),
	ERR_BUTTON_INT_INIT = (ERR_BUTTON_OFFSET+4),
	ERR_BUTTON_MAX_SEQ_REBOOT_RETRIES = (ERR_BUTTON_OFFSET+5),

	/*
	 *   Accelerometer Errors
	 */

	ERR_ACCEL_OFFSET = 0x0200,
	ERR_ACCDRV_SEM_ERROR = (ERR_ACCEL_OFFSET+0)         ,
	ERR_ACCDRV_SEM_TIMEOUT = (ERR_ACCEL_OFFSET+1),
	ERR_ACCDRV_DMA_ERROR = (ERR_ACCEL_OFFSET+2),
	ERR_ACCMGR_STOP_ERROR = (ERR_ACCEL_OFFSET+3),
	ERR_ACCMGR_ALREADY_RUNNING = (ERR_ACCEL_OFFSET+4),
	ERR_ACCMGR_NOT_RUNNING = (ERR_ACCEL_OFFSET+5),
	ERR_ACCDRV_REG_READ_FAIL = (ERR_ACCEL_OFFSET+6),
	ERR_ACCDRV_REG_WRITE_FAIL = (ERR_ACCEL_OFFSET+7),
	ERR_ACCDRV_WRONG_BUFSIZE = (ERR_ACCEL_OFFSET+8),
	ERR_ACCMGR_NOT_IDLE_ERROR = (ERR_ACCEL_OFFSET+9),
	ERR_ACCDRV_TOO_FEW_BYTES = (ERR_ACCEL_OFFSET+0xA),
	ERR_ACCDRV_INVALID_RATE = (ERR_ACCEL_OFFSET+0xB),
	ERR_ACCDRV_NOT_READY = (ERR_ACCEL_OFFSET+0xC),
	ERR_ACCDRV_BAD_BUFFER = (ERR_ACCEL_OFFSET+0xD),
	ERR_ACCMGR_POST_ERROR = (ERR_ACCEL_OFFSET+0xE),
	ERR_ACCMGR_DMA_OVERRUN = (ERR_ACCEL_OFFSET+0xF),
	ERR_WMP_SETUP_FAIL = (ERR_ACCEL_OFFSET+0x10),
	ERR_WMP_ENCODE_FAIL = (ERR_ACCEL_OFFSET+0x11),
	ERR_ACCMGR_UNEXPECTED_LAST_BUF = (ERR_ACCEL_OFFSET+0x12),
	ERR_ACCMGR_SLEEP_TIME_BOGUS = (ERR_ACCEL_OFFSET+0x13),
	ERR_ACCMGR_ZERO_LEN_EVENT = (ERR_ACCEL_OFFSET+0x14),
	ERR_ACCMGR_SLEEP_START_BIGGER = (ERR_ACCEL_OFFSET+0x15),
	ERR_ACCMGR_HARDWARE_BROKEN = (ERR_ACCEL_OFFSET+0x16),
	ERR_ACCMGR_ALREADY_ASLEEP = (ERR_ACCEL_OFFSET+0x17),

	/*
	 *   Bluetooth Errors
	 */
	ERR_BT_OFFSET = 0x0300,
	ERR_BT_NOT_CONNECTED = (ERR_BT_OFFSET+0),
	ERR_BT_ERROR = (ERR_BT_OFFSET+1),
	ERR_BT_NO_HANDLES = (ERR_BT_OFFSET+2),
	ERR_BT_BAD_BD_ADDR = (ERR_BT_OFFSET+3),
	ERR_BT_BAD_HANDLE = (ERR_BT_OFFSET+4),
	ERR_BT_NO_DEVICES = (ERR_BT_OFFSET+5),
	ERR_BT_BUSY = (ERR_BT_OFFSET+6),
	ERR_BT_SDP_CONN = (ERR_BT_OFFSET+7),
	ERR_BT_SDP_RESP = (ERR_BT_OFFSET+8),
	ERR_BT_CREATE_TASK = (ERR_BT_OFFSET+9),
	ERR_BT_BAD_PATCH = (ERR_BT_OFFSET+0xA),
	ERR_BT_PAIRING_FAILED = (ERR_BT_OFFSET+0xB),
	ERR_BT_HARDWARE_FAIL = (ERR_BT_OFFSET+0xC),
	ERR_MFI_HARDWARE_FAIL = (ERR_BT_OFFSET+0xD),
	ERR_BT_OPEN_STK_FAILED_N_TIMES = (ERR_BT_OFFSET+0xE),
	ERR_BT_TASK_STILL_RUNNING = (ERR_BT_OFFSET+0xF),
	ERR_BT_POWERUP_SEQ_FAILED = (ERR_BT_OFFSET+0x10),
	ERR_BT_DUPLICATE_MSG = (ERR_BT_OFFSET+0x11),
	ERR_BT_STACK_FAILURE = (ERR_BT_OFFSET+0x12),
	ERR_BT_RX_FAILURE = (ERR_BT_OFFSET+0x13),
	ERR_BT_WMP_GET = (ERR_BT_OFFSET+0x14),
	ERR_BT_LM_CHCKN_FAIL = (ERR_BT_OFFSET+0x15),
	ERR_BT_SEND = (ERR_BT_OFFSET+0x16),
	ERR_BT_CONN_TO = (ERR_BT_OFFSET+0x17),
	ERR_BT_CONN_FAIL = (ERR_BT_OFFSET+0x18),

	/*
	 *   WIFI Errors
	 */
	ERR_WIFI_OFFSET = 0x0400,
	ERR_WIFI_NO_SOCKETS = (ERR_WIFI_OFFSET+0 ),
	ERR_WIFI_BAD_SSID = (ERR_WIFI_OFFSET+1 ),
	ERR_WIFI_CONNECT_FAIL = (ERR_WIFI_OFFSET+2 ),
	ERR_WIFI_DHCP_FAIL = (ERR_WIFI_OFFSET+3 ),
	ERR_WIFI_NOT_CONNECTED = (ERR_WIFI_OFFSET+4 ),
	ERR_WIFI_ERROR = (ERR_WIFI_OFFSET+5 ),
	ERR_WIFI_SOCKET_CREATE_FAIL = (ERR_WIFI_OFFSET+6 ),
	ERR_WIFI_SOCKET_CONNECT_FAIL = (ERR_WIFI_OFFSET+7 ),
	ERR_WIFI_BAD_SOCKET = (ERR_WIFI_OFFSET+8 ),
	ERR_WIFI_SECURITY_ERROR = (ERR_WIFI_OFFSET+9 ),
	ERR_WIFI_SHUTDOWN_ERROR = (ERR_WIFI_OFFSET+0xA ),
	ERR_WIFI_SEND_ERROR = (ERR_WIFI_OFFSET+0xB ),
	ERR_WIFI_SELECT_ERROR = (ERR_WIFI_OFFSET+0xC ),
	ERR_WIFI_RECEIVE_NULL = (ERR_WIFI_OFFSET+0xD ),
	ERR_WIFI_BAD_NETWORK = (ERR_WIFI_OFFSET+0xE ),
	ERR_WIFI_DNS_ERROR = (ERR_WIFI_OFFSET+0xF ),
	ERR_WIFI_SSID_NOT_IN_CFG = (ERR_WIFI_OFFSET+0x10),
	ERR_WIFI_WHTTP_GENERIC = (ERR_WIFI_OFFSET+0x11),
	ERR_WIFI_ATHEROS_ASSERT = (ERR_WIFI_OFFSET+0x12),
	ERR_WIFI_HW_MAYBE_FAILED = (ERR_WIFI_OFFSET+0x13),
	ERR_WIFI_SOCK_DELAYS_BOGUS = (ERR_WIFI_OFFSET+0x14),
	ERR_WIFI_NEED_REBOOT = (ERR_WIFI_OFFSET+0x15),
	ERR_WIFI_CRITICAL_ERROR = (ERR_WIFI_OFFSET+0x17),
	ERR_WIFI_DNS_FATAL_ERROR = (ERR_WIFI_OFFSET+0x18),
	ERR_WIFI_IPCFG_INIT = (ERR_WIFI_OFFSET+0x19),
	ERR_WIFI_RTCS_CREATE = (ERR_WIFI_OFFSET+0x1A),
	ERR_WIFI_ENET_INIT = (ERR_WIFI_OFFSET+0x1B),
	ERR_WIFI_SET_POWER = (ERR_WIFI_OFFSET+0x1C),

	/*
	 *   External SPI Flash Errors
	 */
	ERR_EFLASH_OFFSET = 0x0500,
	ERR_EFLASH_INIT = (ERR_EFLASH_OFFSET+0),
	ERR_EFLASH_ERASE = (ERR_EFLASH_OFFSET+1),
	ERR_EFLASH_READ = (ERR_EFLASH_OFFSET+2),
	ERR_EFLASH_WRITE = (ERR_EFLASH_OFFSET+3),
	ERR_EFLASH_REINIT = (ERR_EFLASH_OFFSET+4),
	ERR_EFLASH_TIMEOUT = (ERR_EFLASH_OFFSET+5),
	ERR_EFLASH_SPI = (ERR_EFLASH_OFFSET+6),
	ERR_EFLASH_RD_WR_MISMATCH = (ERR_EFLASH_OFFSET+7),
	ERR_EFLASH_IN_USE_AT_REBOOT = (ERR_EFLASH_OFFSET+8),
	ERR_EFLASH_HW_BROKEN = (ERR_EFLASH_OFFSET+9),
	ERR_EFLASH_ADDR_OOB = (ERR_EFLASH_OFFSET+10),

	/*
	 *   ADC Errors
	 */
	ERR_ADC_OFFSET = 0x0600,

	/*
	 *   GPIO Errors
	 */
	ERR_GPIO_OFFSET = 0x0700,

	/*
	 *   ROHM/Display/LED Errors
	 */
	ERR_LED_OFFSET = 0x0800,
	ERR_LED_GENERIC = (ERR_LED_OFFSET + 0),

	/*
	 *   MFI Errors
	 */
	ERR_MFI_OFFSET = 0x0900,

	/*
	 *   Event Manager Errors
	 */
	ERR_EVTMGR_OFFSET = 0x0A00,
	ERR_EVTMGR_INVALID_EVENT = (ERR_EVTMGR_OFFSET+0),
	ERR_EVTMGR_POST_QUEUE_ERROR = (ERR_EVTMGR_OFFSET+1),
	ERR_EVTMGR_ZERO_LENGTH_PAYLOAD = (ERR_EVTMGR_OFFSET+2),
	ERR_EVTMGR_DUMP_QUEUE_ERROR = (ERR_EVTMGR_OFFSET+3),
	ERR_EVTMGR_NO_DATA_TO_DUMP = (ERR_EVTMGR_OFFSET+4),
	ERR_EVTMGR_MARK_CONSUMED_INVALID = (ERR_EVTMGR_OFFSET+5),
	ERR_EVTMGR_NO_EVT_BLK_PTRS = (ERR_EVTMGR_OFFSET+6),
	ERR_EVTMGR_DUMP_TO_SERV_MAX_PARSE_FAIL = (ERR_EVTMGR_OFFSET+7),
	ERR_EVTMGR_DUMP_TO_SERV_CONMGR_SEND = (ERR_EVTMGR_OFFSET+8),
	ERR_EVTMGR_DUMP_TO_SERV_GENERIC = (ERR_EVTMGR_OFFSET+9),
	ERR_EVTMGR_ZEROLEN_LAST_BLOCK = (ERR_EVTMGR_OFFSET+0xA),
	ERR_EVTMGR_INVALID_W_BLK_PTR = (ERR_EVTMGR_OFFSET+0xB),
	ERR_EVTMGR_INVALID_R_BLK_PTR = (ERR_EVTMGR_OFFSET+0xC),
	ERR_EVTMGR_INVALID_W_BLK = (ERR_EVTMGR_OFFSET+0xD),
	ERR_EVTMGR_INVALID_R_BLK = (ERR_EVTMGR_OFFSET+0xE),
	ERR_EVTMGR_POTENTIAL_DATA_CORRUPT = (ERR_EVTMGR_OFFSET+0xF),
	ERR_EVTMGR_INIT_READING_FLASH = (ERR_EVTMGR_OFFSET+0x10),
	ERR_EVTMGR_CRC_FAILED = (ERR_EVTMGR_OFFSET+0x11),
	ERR_EVTMGR_MAGIC_SIG_MISMATCH = (ERR_EVTMGR_OFFSET+0x12),
	ERR_EVTMGR_CHUNK_SZ_MALLOC = (ERR_EVTMGR_OFFSET+0x13),
	ERR_EVTMGR_UPLOAD_BAD_RESP = (ERR_EVTMGR_OFFSET+0x14),
	ERR_EVTMGR_MAX_TCP_ERR = (ERR_EVTMGR_OFFSET+0x15),
	ERR_EVTMGR_NOT_CONNECTED = (ERR_EVTMGR_OFFSET+0x16),
	ERR_EVTMGR_PACKET_INVALID = (ERR_EVTMGR_OFFSET+0x17),
	ERR_EVTMGR_CHUNK_EXCEEDS_MAX_PACKET_LEN = (ERR_EVTMGR_OFFSET+0x18), // FW-922

	/*
	 *   Power Manager Erros
	 */
	ERR_PWRMGR_OFFSET = 0x0B00,
	ERR_PWRMGR_INVALID_PWRMODE = (ERR_PWRMGR_OFFSET + 0),
	ERR_PWRMGR_INVALID_GPIO_INIT = (ERR_PWRMGR_OFFSET + 1),
	ERR_PWRMGR_VLPR_ERROR = (ERR_PWRMGR_OFFSET + 2),
	ERR_PWRMGR_RUNM_ERROR = (ERR_PWRMGR_OFFSET + 3),
	ERR_PWRMGR_CHGB_2Hz_FAULT = (ERR_PWRMGR_OFFSET + 4),
	ERR_PWRMGR_ON_VOTES_INVALID = (ERR_PWRMGR_OFFSET + 5),

	/*
	 *   Connection Manager Errors
	 */
	ERR_CONMGR_OFFSET = 0x0C00,
	ERR_CONMGR_NOT_CONNECTED = (ERR_CONMGR_OFFSET + 0),
	ERR_CONMGR_BUSY = (ERR_CONMGR_OFFSET + 1),
	ERR_CONMGR_INVALID_HANDLE = (ERR_CONMGR_OFFSET + 2),
	ERR_CONMGR_ERROR = (ERR_CONMGR_OFFSET + 3),
	ERR_CONMGR_MULTIPART = (ERR_CONMGR_OFFSET + 4),
	ERR_CONMGR_DNS_ERROR = (ERR_CONMGR_OFFSET + 5),
	ERR_CONMGR_SOCK_CREATE_ERROR = (ERR_CONMGR_OFFSET + 6),
	ERR_CONMGR_CRITICAL = (ERR_CONMGR_OFFSET + 7),

	/*
	 *   Config Manager Errors
	 */
	ERR_CFGMGR_OFFSET = 0x0D00,
	ERR_CFGMGR_ENCODE_FAILED = (ERR_CFGMGR_OFFSET + 0),
	ERR_CFGMGR_DECODE_FAILED = (ERR_CFGMGR_OFFSET + 1),
	ERR_CFGMGR_CONFIG_UNKNOWN = (ERR_CFGMGR_OFFSET + 2),
	ERR_CFGMGR_EXT_FLASH = (ERR_CFGMGR_OFFSET + 3),
	ERR_CFGMGR_NOTHING_TO_DECODE = (ERR_CFGMGR_OFFSET + 4),
	ERR_CFGMGR_PROTOBUF = (ERR_CFGMGR_OFFSET + 5),
	ERR_CFGMGR_ENCODE_ERROR = (ERR_CFGMGR_OFFSET + 6),
	ERR_CFGMGR_DECODE_ERROR = (ERR_CFGMGR_OFFSET + 7),

	/*
	 *   Firmware Update Manager Errors
	 */
	ERR_FWUMGR_OFFSET = 0x0E00,
	ERR_FWUMGR_CONMGR_SEND = (ERR_FWUMGR_OFFSET + 1),
	ERR_FWUMGR_CONMGR_RX = (ERR_FWUMGR_OFFSET + 2),
	ERR_FWUMGR_NO_CHECKIN = (ERR_FWUMGR_OFFSET + 3),
	ERR_FWUMGR_MANIFEST_URL = (ERR_FWUMGR_OFFSET + 4),
	ERR_FWUMGR_GET_PKG = (ERR_FWUMGR_OFFSET + 5),
	ERR_FWU_UNKNOWN_STATUS_TO_SEND = (ERR_FWUMGR_OFFSET + 6),
	ERR_FWU_NO_STATUS = (ERR_FWUMGR_OFFSET + 7),
	ERR_FWUMGR_MANIFEST_PARSE = (ERR_FWUMGR_OFFSET + 8),
	ERR_FWUMGR_PROTOBUF = (ERR_FWUMGR_OFFSET + 9),
	ERR_FWUMGR_INCOMPLETE_DL = (ERR_FWUMGR_OFFSET + 0xA),
	ERR_FWUMGR_NOT_CONNECTED = (ERR_FWUMGR_OFFSET + 0xB),
	ERR_FWUMGR_CRC_FAILED = (ERR_FWUMGR_OFFSET + 0xC),
	ERR_FWUMGR_CHECKIN_MISSING_PARAM = (ERR_FWUMGR_OFFSET + 0xD),
	ERR_FWUMGR_CONMGR_OPEN = (ERR_FWUMGR_OFFSET + 0xE),
	ERR_FWUMGR_CHECKIN_FAIL_PARSE = (ERR_FWUMGR_OFFSET + 0xF),
	ERR_FWUMGR_MAX_ERRORS = (ERR_FWUMGR_OFFSET + 0x10),
	ERR_FWUMGR_INVALID_HTTP_HDR_LENGTH = (ERR_FWUMGR_OFFSET + 0x11),
	ERR_FWUMGR_SANITY_CHECK_INDEXING = (ERR_FWUMGR_OFFSET + 0x12),

	/*
	 *   Factory Errors
	 *   Adding or Deleting Items here means modifying:
	 *   https://whistle.atlassian.net/wiki/display/COR/Burn-in+Guide?src=search#Burn-inGuide-ErrorChart
	 */
	ERR_FACTORY_OFFSET = 0x0F00,
	ERR_BURNIN_SSID_UNSET = (ERR_FACTORY_OFFSET + 1),
	ERR_BURNIN_SSID_NOT_FOUND = (ERR_FACTORY_OFFSET + 2),
	ERR_BURNIN_WDOG_RESET_OCCURED = (ERR_FACTORY_OFFSET + 3),
	ERR_BURNIN_FCFG_INIT = (ERR_FACTORY_OFFSET + 4),
	ERR_BURNIN_INVALID_TIMER = (ERR_FACTORY_OFFSET + 5),
	ERR_BURNIN_UNKNOWN_DISPLAY_CMD = (ERR_FACTORY_OFFSET + 6),
	ERR_BURNIN_TESTBRD_BT_FAIL = (ERR_FACTORY_OFFSET + 7),
	ERR_BURNIN_TESTBRD_MFI_FAIL = (ERR_FACTORY_OFFSET + 8),
	ERR_BURNIN_TESTBRD_ACCEL_FAIL = (ERR_FACTORY_OFFSET + 9),
	ERR_BURNIN_TESTBRD_WIFI_FAIL = (ERR_FACTORY_OFFSET + 0xA),
	ERR_BURNIN_TESTBRD_WSON_FAIL = (ERR_FACTORY_OFFSET + 0xB),
	ERR_BURNIN_MEM_ALLOC = (ERR_FACTORY_OFFSET + 0xC),
	ERR_BURNIN_BAD_BT_PATCHES = (ERR_FACTORY_OFFSET + 0xD),
	ERR_BURNIN_TESTBRD_REBOOT = (ERR_FACTORY_OFFSET + 0xE),
	ERR_BURNIN_CHGB_FAULT = (ERR_FACTORY_OFFSET + 0xF),
	ERR_BURNIN_PWR_DRAIN = (ERR_FACTORY_OFFSET + 0x10),
	ERR_BURNIN_SHA256_HW = (ERR_FACTORY_OFFSET + 0x11),

	/*
	 *    Stats
	 *    OFFSET = 0x1000
	 *    This is in the stat_t enum, don't mess with this range here.
	 */
	
	/*
	 *   Corona Console Errors
	 */
	ERR_CC_OFFSET = 0x1200,
	ERR_CC_UNINIATIALIZED = (ERR_CC_OFFSET+0),
	ERR_CC_SHERLOCK_QU_FULL = (ERR_CC_OFFSET+1),
	ERR_CC_SHERLOCK_LOG_FAIL = (ERR_CC_OFFSET+2),

	/*
	 *   BT Proximity Errors
	 */
	ERR_PRX_OFFSET = 0x1300,
	ERR_PRX_ZERO_LEN_PAYLOAD = (ERR_PRX_OFFSET + 1),

	/*
	 *   Protobuf Errors
	 */
	ERR_PB_OFFSET = 0x1400,
	ERR_PB_MAX_LEN = (ERR_PB_OFFSET + 1),

	/*
	 *   Bark Errors (woof woof)
	 */
	ERR_BARK_OFFSET = 0x1500,
	ERR_BARK_OPEN_ERROR = (ERR_BARK_OFFSET + 0),
	ERR_BARK_CLOSE_ERROR = (ERR_BARK_OFFSET + 1),
	ERR_BARK_SEND_ERROR = (ERR_BARK_OFFSET + 2),
	ERR_BARK_RECEIVE_ERROR = (ERR_BARK_OFFSET + 3),
	
	/*
	 *   HTTP Errors
	 */
	ERR_WHTTP_OFFSET = 0x1600,
	ERR_WHTTP_INPUT_SHORT = (ERR_WHTTP_OFFSET + 1),
	ERR_WHTTP_TRANSFER_CHUNKED = (ERR_WHTTP_OFFSET + 2),
	ERR_WHTTP_HEADER_SZ_NOT_SANE = (ERR_WHTTP_OFFSET + 3),
	ERR_WHTTP_BAD_HTTP_RETURN_CODE = (ERR_WHTTP_OFFSET + 4),
	ERR_WHTTP_NO_RESP_TERMINATOR = (ERR_WHTTP_OFFSET + 5),
	ERR_WHTTP_NO_CONTENT_LEN_TAG = (ERR_WHTTP_OFFSET + 6),
	ERR_WHTTP_VERBOSE = (ERR_WHTTP_OFFSET + 7),
	ERR_WHTTP_JUST_A_MSG = (ERR_WHTTP_OFFSET + 8),
	ERR_WHTTP_CONTENTS = (ERR_WHTTP_OFFSET + 9),     // dump the byte contents, b/c trouble parsing HTTP
	
    /*
     *   SHA-256 Errors
     */
    ERR_SHA256_OFFSET = 0x1700,
    ERR_SHA256_HW_NO_SUPPORT = (ERR_SHA256_OFFSET + 1)
	
} err_t;

////////////////////////////////////////////////////////////////////////////////
// Whistle Statistics Codes
////////////////////////////////////////////////////////////////////////////////
typedef enum _stat_t
{
	/*
	 *    Stats
	 */
	STAT_OFFSET = 0x1000,
	STAT_FWUMGR_CHECKIN_RETRY = 	(STAT_OFFSET + 1),
	STAT_WIFI_OPEN_RETRY = 			(STAT_OFFSET + 2),
	STAT_WIFI_DHCP_TIME = 			(STAT_OFFSET + 3), //Includes DHCP
	STAT_WIFI_ASSOC_TIME = 			(STAT_OFFSET + 4),
	STAT_BT_PROX_CONN = 			(STAT_OFFSET + 5),
	STAT_BT_CONN = 					(STAT_OFFSET + 6),
	STAT_BT_PAIR_ADD_DELETE = 		(STAT_OFFSET + 7),
	STAT_WIFI_ADD = 			    (STAT_OFFSET + 8),
	STAT_WIFI_DEL = 			    (STAT_OFFSET + 9),
	STAT_EVTUP_NO_DATA = 			(STAT_OFFSET + 0xA),
	STAT_EVTUP_RETRY_OPEN = 		(STAT_OFFSET + 0xB),
	STAT_EVTUP_RETRY_RECEIVE = 		(STAT_OFFSET + 0xC),
	STAT_EVTUP_RETRY_SEND_DATA = 	(STAT_OFFSET + 0xD),
	STAT_EVTUP_RETRY_SEND_HDR = 	(STAT_OFFSET + 0xE),
	STAT_EVTUP_SINGLE_TRANSFER_COMPLETE = 	(STAT_OFFSET + 0xF),
	STAT_BT_MAC_LIST =              (STAT_OFFSET + 0x10),
    STAT_BUTTON_WAS_PRESSED =       (STAT_OFFSET + 0x11),
    STAT_RTC_TIME_SERVER_SYNCED =   (STAT_OFFSET + 0x12),
	STAT_LAST_STAT = 				STAT_RTC_TIME_SERVER_SYNCED // Must change this if you add a new one
} stat_t;

////////////////////////////////////////////////////////////////////////////////
// Whistle Number Types
////////////////////////////////////////////////////////////////////////////////
typedef enum _numbered_info_number_type_t
{
	NUMBER_TYPE_NONE,
	NUMBER_TYPE_UNNUMBERED,
	NUMBER_TYPE_ERR,
	NUMBER_TYPE_STAT	
} numbered_info_number_type_t;

////////////////////////////////////////////////////////////////////////////////
// Externs
////////////////////////////////////////////////////////////////////////////////
extern err_t _numbered_info_log(int number, int print_to_console, const char *pFile, const char *pFunc, int line, ...);
extern err_t _numbered_info_log_bytes(int number, const char *pFile, const char *pFunc, int line, unsigned char *payload, unsigned long num_bytes);
extern const char *ERR_STRING;
extern const char *STAT_STRING;


#endif /* APP_ERRORS_H_ */
