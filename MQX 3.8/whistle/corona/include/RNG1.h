/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : RNG1.h
**     Project     : ProcessorExpert
**     Processor   : MK60DN512VMC10
**     Component   : RNG_LDD
**     Version     : Component 01.069, Driver 01.02, CPU db: 3.00.000
**     Compiler    : CodeWarrior ARM C Compiler
**     Date/Time   : 2013-07-10, 21:16, # CodeGen: 99
**     Abstract    :
**         This component implements the Random Number Generator/Accelerator (RNGB/RNGA) driver.
**     Settings    :
**          Component name                                 : RNG1
**          Device                                         : RNG
**          Interrupt service                              : Enabled
**            Interrupt                                    : INT_RNG
**            Interrupt priority                           : medium priority
**          Settings                                       : 
**            High assurance                               : Enabled
**          Initialization                                 : 
**            Sleep                                        : no
**            Start RNGA                                   : yes
**            Entropy register init                        : Enabled
**              Entropy value                              : 12345
**            Event mask                                   : 
**              OnError                                    : Enabled
**            Auto initialization                          : no
**     Contents    :
**         Init            - LDD_TDeviceData* RNG1_Init(LDD_TUserData *UserDataPtr);
**         SetEventMask    - LDD_TError RNG1_SetEventMask(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask...
**         GetEventMask    - LDD_TEventMask RNG1_GetEventMask(LDD_TDeviceData *DeviceDataPtr);
**         GetStatus       - uint32_t RNG1_GetStatus(LDD_TDeviceData *DeviceDataPtr);
**         InsertEntropy   - void RNG1_InsertEntropy(LDD_TDeviceData *DeviceDataPtr, uint32_t Value);
**         GetRandomNumber - LDD_TError RNG1_GetRandomNumber(LDD_TDeviceData *DeviceDataPtr, uint32_t...
**
**     Copyright : 1997 - 2012 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file RNG1.h
** @version 01.02
** @date 2013-07-10, 21:16, # CodeGen: 99
** @brief
**         This component implements the Random Number Generator/Accelerator (RNGB/RNGA) driver.
*/         
/*!
**  @addtogroup RNG1_module RNG1 module documentation
**  @{
*/         


#ifndef __RNG1_H
#define __RNG1_H

#include <mqx.h>
#include <bsp.h>
#include "app_errors.h"

typedef uint16_t LDD_TError;           /*!< Error type. */
typedef uint32_t LDD_TEventMask;       /*!< Event mask type. */
/* MODULE RNG1. */

/* Include shared modules, which are used for whole project */
//#include "PE_Types.h"
//#include "PE_Error.h"
//#include "PE_Const.h"
//#include "IO_Map.h"
///* Include inherited beans */
#include "RNGA_PDD.h"
//
//#include "Cpu.h"

/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define RNG1_PRPH_BASE_ADDRESS  0x400A0000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define RNG1_Init_METHOD_ENABLED       /*!< Init method of the component RNG1 is enabled (generated) */
#define RNG1_SetEventMask_METHOD_ENABLED /*!< SetEventMask method of the component RNG1 is enabled (generated) */
#define RNG1_GetEventMask_METHOD_ENABLED /*!< GetEventMask method of the component RNG1 is enabled (generated) */
#define RNG1_GetStatus_METHOD_ENABLED  /*!< GetStatus method of the component RNG1 is enabled (generated) */
#define RNG1_InsertEntropy_METHOD_ENABLED /*!< InsertEntropy method of the component RNG1 is enabled (generated) */
#define RNG1_GetRandomNumber_METHOD_ENABLED /*!< GetRandomNumber method of the component RNG1 is enabled (generated) */


/*
** ===================================================================
** RNG device types and constants (from PE_Types.h)
** ===================================================================
*/


#define LDD_RNG_LFSR_ERROR 0x01U       /*!< Linear feedback shift register error */
#define LDD_RNG_OSCILLATOR_ERROR 0x02U /*!< Oscillator error */
#define LDD_RNG_SELF_TEST_ERROR 0x04U  /*!< Self test error */
#define LDD_RNG_STATISTICAL_ERROR 0x08U /*!< LStatistical test error */
#define LDD_RNG_FIFO_UNDERFLOW_ERROR 0x10U /*!< FIFO underflow error */

#define LDD_RNG_SELF_TETS_RESEED_ERROR 0x00200000U /*!< Reseed self test fail */
#define LDD_RNG_SELF_TEST_PRNG_ERROR 0x00400000U /*!< PRNG self test fail */
#define LDD_RNG_SELF_TEST_TRNG_ERROR 0x00800000U /*!< TRNG self test fail */
#define LDD_RNG_MONOBIT_TEST_ERROR 0x01000000U /*!< Monobit test fail */
#define LDD_RNG_LENGTH_1_RUN_TEST_ERROR 0x02000000U /*!< Length 1 run test fail */
#define LDD_RNG_LENGTH_2_RUN_TEST_ERROR 0x04000000U /*!< Length 2 run test fail */
#define LDD_RNG_LENGTH_3_RUN_TEST_ERROR 0x08000000U /*!< Length 3 run test fail */
#define LDD_RNG_LENGTH_4_RUN_TEST_ERROR 0x10000000U /*!< Length 4 run test fail */
#define LDD_RNG_LENGTH_5_RUN_TEST_ERROR 0x20000000U /*!< Length 5 run test fail */
#define LDD_RNG_LENGTH_6_RUN_TEST_ERROR 0x40000000U /*!< Length 6 run test fail */
#define LDD_RNG_LONG_RUN_TEST_ERROR 0x80000000U /*!< Long run test fail */

#define LDD_RNG_ON_SEED_GENERATION_DONE 0x01U /*!< OnSeedGenerationDone event mask */
#define LDD_RNG_ON_SELF_TEST_DONE 0x02U /*!< OnSelfTestDone event mask */
#define LDD_RNG_ON_ERROR_LFSR 0x04U    /*!< OnErrorLFSR event mask */
#define LDD_RNG_ON_OSC_ERROR 0x08U     /*!< OnOscError event mask */
#define LDD_RNG_ON_SELF_TEST_ERROR 0x10U /*!< OnSelfTestError event mask */
#define LDD_RNG_ON_STATISTICAL_ERROR 0x20U /*!< OnStatisticalError event mask */
#define LDD_RNG_ON_FIFO_UNDER_FLOW_ERROR 0x40U /*!< OnFIFOUnderFlowError event mask */
#define LDD_RNG_ON_FIFOUNDER_FLOW_ERROR 0x40U /*!< OnFIFOUnderFlowError event mask */

#define LDD_RNG_STATUS_ERROR 0xFFFFU   /*!< Error in RNG module flag */
#define LDD_RNG_STATUS_NEW_SEED_DONE 0x40U /*!< New seed done flag */
#define LDD_RNG_STATUS_SEED_DONE 0x20U /*!< Seed done flag */
#define LDD_RNG_STATUS_SELF_TEST_DONE 0x10U /*!< Self test done flag */
#define LDD_RNG_STATUS_RESEED_NEEDED 0x08U /*!< Reseed needed flag */
#define LDD_RNG_STATUS_SLEEP 0x04U     /*!< RNG in sleep mode */
#define LDD_RNG_STATUS_BUSY 0x02U      /*!< RNG busy flag */


/*
** ===================================================================
** RNGA device types and constants (from PE_Types.h)
** ===================================================================
*/

#define LDD_RNG_ON_ERROR 0x01U         /*!< OnError event mask */

#define LDD_RNG_STATUS_SECURITY_VIOLATION 0x01U /*!< Security violation occured */
#define LDD_RNG_STATUS_LAST_READ_UNDERFLOW 0x02U /*!< Last read from RNGA caused underflow error */
#define LDD_RNG_STATUS_OUT_REG_UNDERFLOW 0x04U /*!< The RNGA Output Register has been read while empty since last read of the RNGA Status Register. */
#define LDD_RNG_STATUS_ERR_INT_PENDING 0x08U /*!< Error interrupt pending */
#define LDD_RNG_STATUS_SLEEP_MODE 0x10U /*!< Sleep mode enabled */

/*
 *  ====================================================================
 */


/* Events configuration constants - generated for all enabled component's events */
#define RNG1_OnError_EVENT_ENABLED     /*!< OnError event of the component RNG1 is enabled (generated) */

/*
** ===================================================================
**     Method      :  RNG1_Init (component RNG_LDD)
*/
/*!
**     @brief
**         Initializes the device according to design-time
**         configuration properties. Allocates memory for the device
**         data structure. 
**         This method can be called only once. Before the second call
**         of Init the Deinit method must be called first.
**     @param
**         UserDataPtr     - Pointer to device data
**                           structure pointer. This pointer will be
**                           passed to all events as parameter.
**     @return
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
void RNG1_Init(void);


void RNG1_Close(void);

/*
** ===================================================================
**     Method      :  RNG1_GetRandomNumber (component RNG_LDD)
*/
/*!
**     @brief
**         This method gets the next random number generated by the RNG.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by Init method. 
**     @param
**         Value           - Pointer to variable where random
**                           number will be stored.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_FAULT - only for RNG B-type: RNG failed.
**                           Use GetError() method to get error type. 
**                           ERR_NOTAVAIL - Seed was not generated since
**                           last reset. Call GenerateSeed() method -
**                           RNGB, or RNGA is stopped/sleeping.
*/
/* ===================================================================*/
LDD_TError RNG1_GetRandomNumber(uint32_t *Value);

/*
** ===================================================================
**     Method      :  RNG1_SetEventMask (component RNG_LDD)
*/
/*!
**     @brief
**         This method masks the events of the interrupts generated by
**         errors or interrupts generated upon completion of seed and
**         self test modes in the RNGB.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by Init method. 
**     @param
**         EventMask       - Value of the event mask. 
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_PARAM_MASK - Event mask not valid
*/
/* ===================================================================*/
LDD_TError RNG1_SetEventMask(LDD_TEventMask EventMask);

/*
** ===================================================================
**     Method      :  RNG1_Interrupt (component RNG_LDD)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {Default RTOS Adapter} ISR function prototype */
//PE_ISR(RNG1_Interrupt);
/*
** ===================================================================
**     Method      :  RNG1_GetStatus (component RNG_LDD)
*/
/*!
**     @brief
**         This method returns the value of the RNG status register.
**         Use this method to poll status of RNG when interrupts are
**         disabled. 
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by Init method. 
**     @return
**                         - Return the status of the RNG
*/
/* ===================================================================*/
uint32_t RNG1_GetStatus();

/*
** ===================================================================
**     Method      :  RNG1_InsertEntropy (component RNG_LDD)
*/
/*!
**     @brief
**         Use this method to insert additional entropy to RNGA
**         (current time using highest precision possible, mouse and
**         keyboard motions...). 
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by Init method. 
**     @param
**         Value           - New entropy value for RNGA.
*/
/* ===================================================================*/
void RNG1_InsertEntropy(uint32_t Value);

/* END RNG1. */

#endif
/* ifndef __RNG1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0.12 [05.05]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
